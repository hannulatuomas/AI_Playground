[mypy]
# ============================================================================
# MyPy Configuration for AI Agent Console
# ============================================================================
# This configuration provides a balanced approach to type checking:
# - Strict enough to catch common errors
# - Flexible enough to work with existing code
# - Gradual adoption friendly

# Python version
python_version = 3.11

# Output settings
show_error_codes = True
show_error_context = True
show_column_numbers = True
pretty = True
color_output = True

# Import discovery
namespace_packages = True
explicit_package_bases = True

# Error strictness (gradually increase these)
check_untyped_defs = True
disallow_untyped_calls = False
disallow_untyped_defs = False
disallow_incomplete_defs = False
disallow_untyped_decorators = False

# None and Optional handling
no_implicit_optional = True
strict_optional = True

# Warnings
warn_redundant_casts = True
warn_unused_ignores = True
warn_unused_configs = True
warn_return_any = False
warn_unreachable = True

# Error handling
ignore_missing_imports = True
follow_imports = normal

# Miscellaneous
strict_equality = True
strict_concatenate = False

# Output
show_absolute_path = False

# Per-module options

# Core modules - stricter checking
[mypy-core.*]
disallow_untyped_defs = True
disallow_incomplete_defs = True
check_untyped_defs = True

# Tools modules - stricter checking
[mypy-tools.*]
disallow_untyped_defs = True
disallow_incomplete_defs = True
check_untyped_defs = True

# Agents base classes - stricter checking
[mypy-agents.base.*]
disallow_untyped_defs = True
disallow_incomplete_defs = True
check_untyped_defs = True

# Language-specific agents - moderate checking
[mypy-agents.languages.*]
check_untyped_defs = True
warn_return_any = False

# Test files - more lenient
[mypy-tests.*]
disallow_untyped_defs = False
disallow_incomplete_defs = False
ignore_errors = False

[mypy-test_*]
disallow_untyped_defs = False
disallow_incomplete_defs = False
ignore_errors = False

# Third-party libraries without stubs
[mypy-ollama.*]
ignore_missing_imports = True

[mypy-chromadb.*]
ignore_missing_imports = True

[mypy-rich.*]
ignore_missing_imports = True

[mypy-typer.*]
ignore_missing_imports = True

[mypy-duckduckgo_search.*]
ignore_missing_imports = True

[mypy-beautifulsoup4.*]
ignore_missing_imports = True

[mypy-bs4.*]
ignore_missing_imports = True

[mypy-lxml.*]
ignore_missing_imports = True

[mypy-gitpython.*]
ignore_missing_imports = True

[mypy-git.*]
ignore_missing_imports = True

[mypy-pandas.*]
ignore_missing_imports = True

[mypy-numpy.*]
ignore_missing_imports = True

[mypy-matplotlib.*]
ignore_missing_imports = True

[mypy-seaborn.*]
ignore_missing_imports = True

# Incremental mode
incremental = True
cache_dir = .mypy_cache

# Performance
cache_fine_grained = True

# ============================================================================
# Notes for Type Checking Strategy
# ============================================================================
# 
# Gradual Adoption:
# 1. Start with `check_untyped_defs = True` (already enabled)
# 2. Add type hints to new code
# 3. Gradually enable stricter options:
#    - disallow_untyped_defs = True
#    - disallow_incomplete_defs = True
#    - disallow_untyped_calls = True
# 4. Fix errors module by module
#
# Running MyPy:
#   mypy .                    # Check entire project
#   mypy agents/             # Check specific directory
#   mypy agents/base/        # Check base classes only
#   mypy --strict agents/    # Strict mode
#
# Common Issues:
# 1. "Module has no attribute": Add type stub or ignore_missing_imports
# 2. "Incompatible return value": Add proper return type annotations
# 3. "Argument has incompatible type": Check function signatures
#
# ============================================================================
