[Project basics]
1. This is a [project description]
2. Main purpose of this project/program is to [main purpose]
3. Tech stack is: [tech stack]
4. Main goals of the project are: [main goals]
5. The most important features of this program are: [main features]
6. Check thoroughly what we have before adding new code

[Architecture & Structure]
- Keep the codebase clean, easy to read, understand and maintain, modular and simple

[Coding Standards]
- Analyze the codebase thoroughly before making changes
- The code/codebase should be easily extensible, future-proof, robust and clean
- Clear all legacy code and duplicate code, remove unnecessary comments, and ensure the code is clean and maintainable
- Avoid breaking existing functionality
- Focus on scoped improvements only
- Apply Single Responsibility Principle
- Keep code clean and maintainable
- Remove unused legacy code
- Naming Conventions: Follow clear and consistent naming conventions.
- Keep using statements clean and up to date
- Do not change language version

[Security & Best Practices]
- Always follow the best practices of security, performance, and accessibility
- Implement proper error handling and input validation.

[Dependencies]
- Don't add new dependencies if not absolutely mandatory
- Keep dependencies to minimum and try not to use vulnerable or deprecated packages to future-proof the project
- Check what dependencies we are already using and try to use those if possible (don't add new dependencies)
- Use existing dependencies if possible
- Do not add new dependencies unless absolutely necessary

[UI]
- UI should have modern, responsive, clean and minimalistic design

[Code Familiarity]
- Analyze the code thoroughly before making changes
- Understand codebase structure, features, gaps, and goals before starting
- Analyze and review the full codebase before working
- Check existing files and code before adding new ones
- Before starting to work on the project, thoroughly analyze and become fully familiar with the codebase
- Make sure you are fully familiar with the codebase’s structure, current features, outstanding gaps, missing features and the main goals of the project before starting to work on it

[Basic Coding Best Practices]
- Write Clear and Meaningful Code: Use Descriptive Naming, Follow Naming Conventions and Avoid Magic Numbers/Strings
- Keep Functions and Files Small: Single Responsibility Principle (Each function or module should do one thing well. If a function grows too large, break it into smaller, reusable functions.), Keep files under 300-500 lines (Split large files into smaller modules or classes based on functionality), One Concept per File, Review File Size Regularly
- Structure Code Logically: Organize by Feature, Use Consistent Formatting (Follow a style guide), Modularize Code, Keep Functions Pure
- Write Readable Code: Comment Sparingly but Effectively, Avoid Deep Nesting, Use Whitespace Wisely, don't make mock/dummy data/code, Create directories for related files to keep the project navigable, Extract Reusable Logic, 
- Handle Errors Gracefully: Centralize Error Handling, Log Meaningful Errors, Validate Inputs
- Optimize for Refactoring: Don’t Repeat Yourself, Use Design Patterns, Refactor Regularly
- Document Code: Use Docstrings/Comments (Document functions, classes, and modules with clear descriptions of parameters, return values, and purpose), Maintain README (include setup instructions, project structure, and usage examples in a project README)
- Plan for Scalability: Avoid Tight Coupling (design components to be independent), Use Configuration Files

[Testing]
- No automatic testing will be done at the moment. I test everything manually, but tests might be implemented later, so plan for that

[Documentation]
- Keep my documentation comprehensive, clean and always up to date
- Before updating documentation, make a comprehensive audit for unnecessary dependencies and code, and remove them
- When updating documentation, make sure to update it in all relevant places
- After updating code, make sure to update documentation in all relevant places as well
- Include Contents section in README
- Document codebase as tree structure with descriptions
- Exclude Collaboration and License sections from README
- Ensure project file doesn't include any legacy files but includes all necessary files before documentation
- Use clear, relevant XML documentation comments
- Remove outdated or irrelevant comments
- Maintain README.md with current app, codebase, settings, and UI details

[Misc]
- When cleaning the codebase, scan for unused code/functions/exports and check thoroughly for any files not imported anywhere
- Try not to brake the existing functionalities
- Focus on the improvements we are doing, and do not try to improve everything at once
- Check how other files/code are implemented and make the new files/code to be consistent with those (format, dependencies...)
- Performance Optimization: Optimize code for performance.
