import React, { createContext, useContext, useState, useEffect } from 'react';
import { useAuth } from './AuthContext';

const ThemeContext = createContext();

export const useTheme = () => {
  const context = useContext(ThemeContext);
  if (!context) {
    throw new Error('useTheme must be used within a ThemeProvider');
  }
  return context;
};

export const ThemeProvider = ({ children }) => {
  const { user, token } = useAuth();
  const [theme, setTheme] = useState('light');
  const [loading, setLoading] = useState(false);

  const API_BASE = process.env.REACT_APP_BACKEND_URL || 'http://localhost:8001';

  // Load theme from user settings or localStorage
  useEffect(() => {
    if (user && user.settings && user.settings.theme) {
      setTheme(user.settings.theme);
      applyTheme(user.settings.theme);
    } else {
      // Fallback to localStorage for non-authenticated users
      const savedTheme = localStorage.getItem('theme') || 'light';
      setTheme(savedTheme);
      applyTheme(savedTheme);
    }
  }, [user]);

  const applyTheme = (themeName) => {
    const root = document.documentElement;
    
    // Remove existing theme classes
    root.classList.remove('light', 'dark', 'high-contrast');
    
    // Add new theme class
    root.classList.add(themeName);
    
    // Apply theme-specific CSS variables
    switch (themeName) {
      case 'dark':
        root.style.setProperty('--background', '0 0% 3.9%');
        root.style.setProperty('--foreground', '0 0% 98%');
        root.style.setProperty('--muted', '0 0% 14.9%');
        root.style.setProperty('--muted-foreground', '0 0% 63.9%');
        root.style.setProperty('--popover', '0 0% 3.9%');
        root.style.setProperty('--popover-foreground', '0 0% 98%');
        root.style.setProperty('--card', '0 0% 3.9%');
        root.style.setProperty('--card-foreground', '0 0% 98%');
        root.style.setProperty('--border', '0 0% 14.9%');
        root.style.setProperty('--input', '0 0% 14.9%');
        root.style.setProperty('--primary', '0 0% 98%');
        root.style.setProperty('--primary-foreground', '0 0% 9%');
        root.style.setProperty('--secondary', '0 0% 14.9%');
        root.style.setProperty('--secondary-foreground', '0 0% 98%');
        root.style.setProperty('--accent', '0 0% 14.9%');
        root.style.setProperty('--accent-foreground', '0 0% 98%');
        root.style.setProperty('--destructive', '0 84.2% 60.2%');
        root.style.setProperty('--destructive-foreground', '0 0% 98%');
        root.style.setProperty('--ring', '0 0% 83.1%');
        break;
      case 'high-contrast':
        root.style.setProperty('--background', '0 0% 0%');
        root.style.setProperty('--foreground', '0 0% 100%');
        root.style.setProperty('--muted', '0 0% 10%');
        root.style.setProperty('--muted-foreground', '0 0% 80%');
        root.style.setProperty('--popover', '0 0% 0%');
        root.style.setProperty('--popover-foreground', '0 0% 100%');
        root.style.setProperty('--card', '0 0% 0%');
        root.style.setProperty('--card-foreground', '0 0% 100%');
        root.style.setProperty('--border', '0 0% 100%');
        root.style.setProperty('--input', '0 0% 20%');
        root.style.setProperty('--primary', '0 0% 100%');
        root.style.setProperty('--primary-foreground', '0 0% 0%');
        root.style.setProperty('--secondary', '0 0% 20%');
        root.style.setProperty('--secondary-foreground', '0 0% 100%');
        root.style.setProperty('--accent', '0 0% 20%');
        root.style.setProperty('--accent-foreground', '0 0% 100%');
        root.style.setProperty('--destructive', '0 100% 50%');
        root.style.setProperty('--destructive-foreground', '0 0% 100%');
        root.style.setProperty('--ring', '0 0% 100%');
        break;
      default: // light theme
        root.style.setProperty('--background', '0 0% 100%');
        root.style.setProperty('--foreground', '0 0% 3.9%');
        root.style.setProperty('--muted', '0 0% 96.1%');
        root.style.setProperty('--muted-foreground', '0 0% 45.1%');
        root.style.setProperty('--popover', '0 0% 100%');
        root.style.setProperty('--popover-foreground', '0 0% 3.9%');
        root.style.setProperty('--card', '0 0% 100%');
        root.style.setProperty('--card-foreground', '0 0% 3.9%');
        root.style.setProperty('--border', '0 0% 89.8%');
        root.style.setProperty('--input', '0 0% 89.8%');
        root.style.setProperty('--primary', '0 0% 9%');
        root.style.setProperty('--primary-foreground', '0 0% 98%');
        root.style.setProperty('--secondary', '0 0% 96.1%');
        root.style.setProperty('--secondary-foreground', '0 0% 9%');
        root.style.setProperty('--accent', '0 0% 96.1%');
        root.style.setProperty('--accent-foreground', '0 0% 9%');
        root.style.setProperty('--destructive', '0 84.2% 60.2%');
        root.style.setProperty('--destructive-foreground', '0 0% 98%');
        root.style.setProperty('--ring', '0 0% 3.9%');
    }
  };

  const updateTheme = async (newTheme) => {
    setLoading(true);
    
    try {
      // If user is authenticated, save to backend
      if (user && token) {
        const response = await fetch(`${API_BASE}/api/user/settings`, {
          method: 'PUT',
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ theme: newTheme }),
        });

        if (response.ok) {
          setTheme(newTheme);
          applyTheme(newTheme);
        } else {
          console.error('Failed to update theme on server');
          // Still apply locally as fallback
          setTheme(newTheme);
          applyTheme(newTheme);
          localStorage.setItem('theme', newTheme);
        }
      } else {
        // Not authenticated, save to localStorage
        setTheme(newTheme);
        applyTheme(newTheme);
        localStorage.setItem('theme', newTheme);
      }
    } catch (error) {
      console.error('Error updating theme:', error);
      // Apply locally as fallback
      setTheme(newTheme);
      applyTheme(newTheme);
      localStorage.setItem('theme', newTheme);
    } finally {
      setLoading(false);
    }
  };

  const themes = [
    { value: 'light', label: 'Light', description: 'Clean and bright interface' },
    { value: 'dark', label: 'Dark', description: 'Easy on the eyes in low light' },
    { value: 'high-contrast', label: 'High Contrast', description: 'Maximum contrast for accessibility' }
  ];

  const value = {
    theme,
    themes,
    updateTheme,
    loading,
    isDark: theme === 'dark',
    isLight: theme === 'light',
    isHighContrast: theme === 'high-contrast',
  };

  return <ThemeContext.Provider value={value}>{children}</ThemeContext.Provider>;
};