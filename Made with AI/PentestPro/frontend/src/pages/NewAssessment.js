import React, { useState, useEffect } from "react";
import axios from "axios";
import { 
  ArrowLeft,
  FileText,
  Play,
  Search,
  Filter,
  Clock,
  Users,
  Shield,
  Network,
  Cloud,
  UserCheck,
  Wifi,
  Building,
  Cpu,
  Bug,
  Eye,
  Search as SearchIcon,
  HardDrive,
  AlertTriangle,
  Code,
  Database,
  Brain,
  Container,
  GitBranch,
  Coins,
  Truck,
  Mail,
  Globe,
  Lock,
  Activity,
  Zap
} from "lucide-react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Badge } from "@/components/ui/badge";
import { useNavigate } from "react-router-dom";
import { toast } from "sonner";

const BACKEND_URL = process.env.REACT_APP_BACKEND_URL;
const API = `${BACKEND_URL}/api`;

const NewAssessment = () => {
  const navigate = useNavigate();
  const [templates, setTemplates] = useState([]);
  const [selectedTemplate, setSelectedTemplate] = useState(null);
  const [assessmentName, setAssessmentName] = useState("");
  const [searchQuery, setSearchQuery] = useState("");
  const [selectedCategory, setSelectedCategory] = useState("all");
  const [loading, setLoading] = useState(true);
  const [creating, setCreating] = useState(false);

  useEffect(() => {
    fetchTemplates();
  }, []);

  const fetchTemplates = async () => {
    try {
      const response = await axios.get(`${API}/templates`);
      setTemplates(response.data);
    } catch (error) {
      console.error("Failed to fetch templates:", error);
      toast.error("Failed to load templates");
    } finally {
      setLoading(false);
    }
  };

  const handleCreateAssessment = async () => {
    if (!selectedTemplate || !assessmentName.trim()) {
      toast.error("Please select a template and provide an assessment name");
      return;
    }

    setCreating(true);
    try {
      const response = await axios.post(`${API}/assessments`, {
        template_id: selectedTemplate.id,
        name: assessmentName.trim()
      });
      
      toast.success("Assessment created successfully");
      navigate(`/assessments/${response.data.id}/workflow`);
    } catch (error) {
      console.error("Failed to create assessment:", error);
      toast.error("Failed to create assessment");
    } finally {
      setCreating(false);
    }
  };

  // Filter templates
  const filteredTemplates = templates.filter(template => {
    const matchesSearch = template.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
                         template.description.toLowerCase().includes(searchQuery.toLowerCase());
    const matchesCategory = selectedCategory === "all" || template.category === selectedCategory;
    return matchesSearch && matchesCategory;
  });

  // Get unique categories
  const categories = ["all", ...new Set(templates.map(t => t.category))];

  const getTemplateIcon = (category) => {
    switch (category.toLowerCase()) {
      case 'web application':
        return <Shield className="w-6 h-6 text-blue-600" />;
      case 'api security':
        return <Zap className="w-6 h-6 text-green-600" />;
      case 'mobile security':
        return <Users className="w-6 h-6 text-purple-600" />;
      case 'network security':
        return <Network className="w-6 h-6 text-indigo-600" />;
      case 'cloud security':
        return <Cloud className="w-6 h-6 text-sky-600" />;
      case 'social engineering':
        return <UserCheck className="w-6 h-6 text-orange-600" />;
      case 'wireless security':
        return <Wifi className="w-6 h-6 text-teal-600" />;
      case 'physical security':
        return <Building className="w-6 h-6 text-amber-600" />;
      case 'iot security':
        return <Cpu className="w-6 h-6 text-pink-600" />;
      case 'malware analysis':
        return <Bug className="w-6 h-6 text-red-600" />;
      case 'osint':
        return <SearchIcon className="w-6 h-6 text-cyan-600" />;
      case 'digital forensics':
        return <HardDrive className="w-6 h-6 text-slate-700" />;
      case 'compliance':
        return <FileText className="w-6 h-6 text-emerald-600" />;
      case 'red team':
        return <AlertTriangle className="w-6 h-6 text-red-500" />;
      case 'code security':
        return <Code className="w-6 h-6 text-violet-600" />;
      case 'database security':
        return <Database className="w-6 h-6 text-blue-700" />;
      case 'threat intelligence':
        return <Brain className="w-6 h-6 text-purple-700" />;
      case 'incident response':
        return <AlertTriangle className="w-6 h-6 text-yellow-600" />;
      case 'container security':
        return <Container className="w-6 h-6 text-blue-500" />;
      case 'devsecops':
        return <GitBranch className="w-6 h-6 text-green-700" />;
      case 'blockchain security':
        return <Coins className="w-6 h-6 text-yellow-500" />;
      case 'supply chain security':
        return <Truck className="w-6 h-6 text-orange-700" />;
      case 'email security':
        return <Mail className="w-6 h-6 text-blue-400" />;
      case 'dns security':
        return <Globe className="w-6 h-6 text-green-500" />;
      case 'zero trust':
        return <Lock className="w-6 h-6 text-gray-700" />;
      default:
        return <Activity className="w-6 h-6 text-slate-600" />;
    }
  };

  if (loading) {
    return (
      <div className="space-y-6 animate-fade-in">
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {[...Array(6)].map((_, i) => (
            <Card key={i} className="animate-pulse">
              <CardHeader className="space-y-2">
                <div className="h-4 bg-slate-200 rounded w-3/4"></div>
                <div className="h-3 bg-slate-200 rounded w-1/2"></div>
              </CardHeader>
              <CardContent>
                <div className="space-y-2">
                  <div className="h-3 bg-slate-200 rounded"></div>
                  <div className="h-3 bg-slate-200 rounded w-5/6"></div>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6 animate-fade-in">
      {/* Header */}
      <div className="flex items-center space-x-4">
        <Button 
          variant="ghost" 
          size="sm" 
          onClick={() => navigate('/assessments')}
          data-testid="back-to-assessments"
        >
          <ArrowLeft className="w-4 h-4 mr-2" />
          Back to Assessments
        </Button>
      </div>

      <div>
        <h1 className="text-2xl font-bold text-slate-900 text-heading">Create New Assessment</h1>
        <p className="text-slate-600 mt-1">Choose a template and configure your security assessment</p>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
        {/* Template Selection */}
        <div className="lg:col-span-2 space-y-6">
          <div>
            <h2 className="text-lg font-semibold text-slate-900 text-heading mb-4">Select Assessment Template</h2>
            
            {/* Filters */}
            <div className="flex flex-col sm:flex-row gap-4 mb-6">
              <div className="relative flex-1">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-slate-400" />
                <Input
                  placeholder="Search templates..."
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  className="pl-10"
                  data-testid="template-search"
                />
              </div>
              <div className="flex items-center space-x-2">
                <Filter className="w-4 h-4 text-slate-500" />
                <select
                  value={selectedCategory}
                  onChange={(e) => setSelectedCategory(e.target.value)}
                  className="form-select min-w-[150px]"
                  data-testid="category-filter"
                >
                  {categories.map(category => (
                    <option key={category} value={category}>
                      {category === "all" ? "All Categories" : category}
                    </option>
                  ))}
                </select>
              </div>
            </div>

            {/* Template Grid */}
            {filteredTemplates.length > 0 ? (
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {filteredTemplates.map((template) => (
                  <Card 
                    key={template.id}
                    className={`cursor-pointer transition-all duration-200 hover-lift ${
                      selectedTemplate?.id === template.id 
                        ? 'ring-2 ring-blue-500 border-blue-500 bg-blue-50' 
                        : 'hover:border-slate-300'
                    }`}
                    onClick={() => setSelectedTemplate(template)}
                    data-testid={`template-${template.id}`}
                  >
                    <CardHeader className="pb-3">
                      <div className="flex items-start space-x-3">
                        <div className="mt-1">
                          {getTemplateIcon(template.category)}
                        </div>
                        <div className="flex-1 min-w-0">
                          <CardTitle className="text-base mb-1 text-heading truncate">
                            {template.name}
                          </CardTitle>
                          <Badge variant="secondary" className="text-xs">
                            {template.category}
                          </Badge>
                        </div>
                      </div>
                    </CardHeader>
                    <CardContent className="pt-0">
                      <CardDescription className="text-sm text-slate-600 mb-3 line-clamp-2">
                        {template.description}
                      </CardDescription>
                      
                      <div className="flex items-center justify-between text-xs text-slate-500">
                        <span className="flex items-center">
                          <Clock className="w-3 h-3 mr-1" />
                          {template.steps?.length || 0} steps
                        </span>
                        <span>{template.report_structure?.length || 0} sections</span>
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </div>
            ) : (
              <div className="text-center py-8">
                <FileText className="w-12 h-12 text-slate-300 mx-auto mb-4" />
                <p className="text-slate-500">
                  {searchQuery || selectedCategory !== "all" 
                    ? "No templates match your search criteria" 
                    : "No templates available"
                  }
                </p>
              </div>
            )}
          </div>
        </div>

        {/* Assessment Configuration */}
        <div className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle className="text-lg text-heading">Assessment Configuration</CardTitle>
              <CardDescription>
                Provide details for your new assessment
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-2">
                <Label htmlFor="assessment-name">Assessment Name *</Label>
                <Input
                  id="assessment-name"
                  placeholder="e.g., Example Corp Web App Test"
                  value={assessmentName}
                  onChange={(e) => setAssessmentName(e.target.value)}
                  data-testid="assessment-name-input"
                />
              </div>

              {selectedTemplate && (
                <div className="space-y-4 pt-4 border-t border-slate-200">
                  <h4 className="font-medium text-slate-900">Selected Template</h4>
                  <div className="p-3 bg-slate-50 rounded-lg">
                    <div className="flex items-start space-x-3">
                      {getTemplateIcon(selectedTemplate.category)}
                      <div className="flex-1 min-w-0">
                        <p className="font-medium text-slate-900 text-sm">
                          {selectedTemplate.name}
                        </p>
                        <p className="text-xs text-slate-600 mt-1">
                          {selectedTemplate.description}
                        </p>
                        <div className="flex items-center space-x-4 mt-2 text-xs text-slate-500">
                          <span>{selectedTemplate.steps?.length || 0} steps</span>
                          <span>{selectedTemplate.report_structure?.length || 0} report sections</span>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              )}

              <Button 
                className="w-full mt-6"
                onClick={handleCreateAssessment}
                disabled={!selectedTemplate || !assessmentName.trim() || creating}
                data-testid="create-assessment-btn"
              >
                {creating ? (
                  <>
                    <div className="loading-spinner mr-2" />
                    Creating...
                  </>
                ) : (
                  <>
                    <Play className="w-4 h-4 mr-2" />
                    Create Assessment
                  </>
                )}
              </Button>
            </CardContent>
          </Card>

          {/* Help Card */}
          <Card>
            <CardHeader>
              <CardTitle className="text-base text-heading">Need Help?</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-3 text-sm text-slate-600">
                <p>• Choose a template that matches your assessment type</p>
                <p>• Give your assessment a descriptive name</p>
                <p>• You can customize the workflow once created</p>
                <p>• Templates include pre-built steps and reporting structure</p>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
};

export default NewAssessment;