import React, { useState, useEffect } from "react";
import { useParams, useNavigate } from "react-router-dom";
import axios from "axios";
import { 
  ArrowLeft,
  Plus,
  Trash2,
  Save,
  Eye,
  Edit,
  GripVertical,
  X
} from "lucide-react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Badge } from "@/components/ui/badge";
import { Separator } from "@/components/ui/separator";
import { Checkbox } from "@/components/ui/checkbox";
import { toast } from "sonner";

const BACKEND_URL = process.env.REACT_APP_BACKEND_URL;
const API = `${BACKEND_URL}/api`;

const FIELD_TYPES = [
  { value: 'text', label: 'Text Input' },
  { value: 'textarea', label: 'Text Area' },
  { value: 'number', label: 'Number' },
  { value: 'url', label: 'URL' },
  { value: 'select', label: 'Dropdown Select' },
  { value: 'checkbox', label: 'Checkbox' },
  { value: 'file', label: 'File Upload' }
];

const CATEGORIES = [
  "Web Application",
  "API Security", 
  "Mobile Security",
  "Network Security",
  "Cloud Security",
  "Social Engineering",
  "Wireless Security",
  "Physical Security",
  "IoT Security",
  "General"
];

const TemplateEditor = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  const isEditing = !!id;
  
  const [template, setTemplate] = useState({
    name: "",
    description: "",
    category: "General",
    steps: [],
    report_structure: []
  });
  const [loading, setLoading] = useState(false);
  const [saving, setSaving] = useState(false);

  useEffect(() => {
    if (isEditing) {
      fetchTemplate();
    } else {
      // Initialize with a default step
      setTemplate(prev => ({
        ...prev,
        steps: [{
          id: generateId(),
          name: "",
          description: "",
          instructions: "",
          fields: [],
          order: 1
        }],
        report_structure: [{
          id: generateId(),
          title: "Executive Summary",
          content_template: "",
          order: 1
        }]
      }));
    }
  }, [id, isEditing]);

  const fetchTemplate = async () => {
    setLoading(true);
    try {
      const response = await axios.get(`${API}/templates/${id}`);
      setTemplate(response.data);
    } catch (error) {
      console.error("Failed to fetch template:", error);
      toast.error("Failed to load template");
      navigate('/templates');
    } finally {
      setLoading(false);
    }
  };

  const generateId = () => {
    return Math.random().toString(36).substr(2, 9);
  };

  const handleTemplateChange = (field, value) => {
    setTemplate(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const handleStepChange = (stepIndex, field, value) => {
    setTemplate(prev => ({
      ...prev,
      steps: prev.steps.map((step, index) => 
        index === stepIndex ? { ...step, [field]: value } : step
      )
    }));
  };

  const handleFieldChange = (stepIndex, fieldIndex, field, value) => {
    setTemplate(prev => ({
      ...prev,
      steps: prev.steps.map((step, sIndex) => 
        sIndex === stepIndex 
          ? {
              ...step,
              fields: step.fields.map((f, fIndex) =>
                fIndex === fieldIndex ? { ...f, [field]: value } : f
              )
            }
          : step
      )
    }));
  };

  const addStep = () => {
    const newStep = {
      id: generateId(),
      name: "",
      description: "",
      instructions: "",
      fields: [],
      order: template.steps.length + 1
    };
    setTemplate(prev => ({
      ...prev,
      steps: [...prev.steps, newStep]
    }));
  };

  const removeStep = (stepIndex) => {
    setTemplate(prev => ({
      ...prev,
      steps: prev.steps.filter((_, index) => index !== stepIndex)
    }));
  };

  const addField = (stepIndex) => {
    const newField = {
      id: generateId(),
      label: "",
      type: "text",
      required: false,
      placeholder: "",
      options: []
    };
    
    setTemplate(prev => ({
      ...prev,
      steps: prev.steps.map((step, index) => 
        index === stepIndex 
          ? { ...step, fields: [...step.fields, newField] }
          : step
      )
    }));
  };

  const removeField = (stepIndex, fieldIndex) => {
    setTemplate(prev => ({
      ...prev,
      steps: prev.steps.map((step, sIndex) => 
        sIndex === stepIndex
          ? {
              ...step,
              fields: step.fields.filter((_, fIndex) => fIndex !== fieldIndex)
            }
          : step
      )
    }));
  };

  const addReportSection = () => {
    const newSection = {
      id: generateId(),
      title: "",
      content_template: "",
      order: template.report_structure.length + 1
    };
    setTemplate(prev => ({
      ...prev,
      report_structure: [...prev.report_structure, newSection]
    }));
  };

  const removeReportSection = (sectionIndex) => {
    setTemplate(prev => ({
      ...prev,
      report_structure: prev.report_structure.filter((_, index) => index !== sectionIndex)
    }));
  };

  const handleReportSectionChange = (sectionIndex, field, value) => {
    setTemplate(prev => ({
      ...prev,
      report_structure: prev.report_structure.map((section, index) =>
        index === sectionIndex ? { ...section, [field]: value } : section
      )
    }));
  };

  const handleSave = async () => {
    if (!template.name.trim()) {
      toast.error("Please provide a template name");
      return;
    }

    if (template.steps.length === 0) {
      toast.error("Please add at least one step");
      return;
    }

    setSaving(true);
    try {
      if (isEditing) {
        await axios.put(`${API}/templates/${id}`, template);
        toast.success("Template updated successfully");
      } else {
        await axios.post(`${API}/templates`, template);
        toast.success("Template created successfully");
      }
      navigate('/templates');
    } catch (error) {
      console.error("Failed to save template:", error);
      toast.error("Failed to save template");
    } finally {
      setSaving(false);
    }
  };

  if (loading) {
    return (
      <div className="space-y-6 animate-fade-in">
        <div className="animate-pulse space-y-6">
          <div className="h-8 bg-slate-200 rounded w-1/3"></div>
          <Card>
            <CardContent className="p-6 space-y-4">
              <div className="h-6 bg-slate-200 rounded w-1/2"></div>
              <div className="h-4 bg-slate-200 rounded w-3/4"></div>
            </CardContent>
          </Card>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6 animate-fade-in">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-4">
          <Button 
            variant="ghost" 
            size="sm" 
            onClick={() => navigate('/templates')}
            data-testid="back-to-templates"
          >
            <ArrowLeft className="w-4 h-4 mr-2" />
            Back to Templates
          </Button>
        </div>
        
        <div className="flex items-center space-x-3">
          <Button 
            variant="outline" 
            onClick={() => {/* Preview functionality */}}
            data-testid="preview-template"
          >
            <Eye className="w-4 h-4 mr-2" />
            Preview
          </Button>
          <Button 
            onClick={handleSave}
            disabled={saving}
            data-testid="save-template"
          >
            <Save className="w-4 h-4 mr-2" />
            {saving ? "Saving..." : (isEditing ? "Update Template" : "Create Template")}
          </Button>
        </div>
      </div>

      <div>
        <h1 className="text-2xl font-bold text-slate-900 text-heading">
          {isEditing ? "Edit Template" : "Create New Template"}
        </h1>
        <p className="text-slate-600 mt-1">
          {isEditing ? "Modify your assessment template" : "Design a custom assessment template with steps and report structure"}
        </p>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
        {/* Main Content */}
        <div className="lg:col-span-2 space-y-6">
          {/* Basic Information */}
          <Card>
            <CardHeader>
              <CardTitle className="text-heading">Basic Information</CardTitle>
              <CardDescription>
                Define the template name, description, and category
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="template-name">Template Name *</Label>
                  <Input
                    id="template-name"
                    placeholder="e.g., Advanced Web Application Pentest"
                    value={template.name}
                    onChange={(e) => handleTemplateChange('name', e.target.value)}
                    data-testid="template-name-input"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="template-category">Category</Label>
                  <select
                    id="template-category"
                    value={template.category}
                    onChange={(e) => handleTemplateChange('category', e.target.value)}
                    className="form-select"
                    data-testid="template-category-select"
                  >
                    {CATEGORIES.map(category => (
                      <option key={category} value={category}>{category}</option>
                    ))}
                  </select>
                </div>
              </div>
              <div className="space-y-2">
                <Label htmlFor="template-description">Description</Label>
                <Textarea
                  id="template-description"
                  placeholder="Describe what this template is used for..."
                  value={template.description}
                  onChange={(e) => handleTemplateChange('description', e.target.value)}
                  data-testid="template-description-input"
                />
              </div>
            </CardContent>
          </Card>

          {/* Steps */}
          <Card>
            <CardHeader>
              <div className="flex items-center justify-between">
                <div>
                  <CardTitle className="text-heading">Assessment Steps</CardTitle>
                  <CardDescription>
                    Define the step-by-step process for this assessment
                  </CardDescription>
                </div>
                <Button 
                  variant="outline" 
                  size="sm"
                  onClick={addStep}
                  data-testid="add-step-btn"
                >
                  <Plus className="w-4 h-4 mr-2" />
                  Add Step
                </Button>
              </div>
            </CardHeader>
            <CardContent className="space-y-6">
              {template.steps.map((step, stepIndex) => (
                <div key={step.id} className="p-4 border border-slate-200 rounded-lg space-y-4">
                  <div className="flex items-center justify-between">
                    <Badge variant="secondary">Step {stepIndex + 1}</Badge>
                    <Button 
                      variant="ghost" 
                      size="sm"
                      onClick={() => removeStep(stepIndex)}
                      data-testid={`remove-step-${stepIndex}`}
                    >
                      <Trash2 className="w-4 h-4 text-red-500" />
                    </Button>
                  </div>
                  
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div className="space-y-2">
                      <Label>Step Name</Label>
                      <Input
                        placeholder="e.g., Information Gathering"
                        value={step.name}
                        onChange={(e) => handleStepChange(stepIndex, 'name', e.target.value)}
                      />
                    </div>
                    <div className="space-y-2">
                      <Label>Short Description</Label>
                      <Input
                        placeholder="Brief step description"
                        value={step.description}
                        onChange={(e) => handleStepChange(stepIndex, 'description', e.target.value)}
                      />
                    </div>
                  </div>
                  
                  <div className="space-y-2">
                    <Label>Instructions</Label>
                    <Textarea
                      placeholder="Detailed instructions for this step..."
                      value={step.instructions}
                      onChange={(e) => handleStepChange(stepIndex, 'instructions', e.target.value)}
                    />
                  </div>

                  {/* Fields */}
                  <div className="space-y-3">
                    <div className="flex items-center justify-between">
                      <Label className="text-sm font-medium">Step Fields</Label>
                      <Button 
                        variant="outline" 
                        size="sm"
                        onClick={() => addField(stepIndex)}
                        data-testid={`add-field-${stepIndex}`}
                      >
                        <Plus className="w-3 h-3 mr-1" />
                        Add Field
                      </Button>
                    </div>
                    
                    {step.fields.map((field, fieldIndex) => (
                      <div key={field.id} className="p-3 bg-slate-50 rounded border space-y-3">
                        <div className="flex items-center justify-between">
                          <span className="text-xs font-medium text-slate-600">Field {fieldIndex + 1}</span>
                          <Button 
                            variant="ghost" 
                            size="sm"
                            onClick={() => removeField(stepIndex, fieldIndex)}
                          >
                            <X className="w-3 h-3 text-red-500" />
                          </Button>
                        </div>
                        
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                          <div className="space-y-1">
                            <Label className="text-xs">Field Label</Label>
                            <Input
                              size="sm"
                              placeholder="Field name"
                              value={field.label}
                              onChange={(e) => handleFieldChange(stepIndex, fieldIndex, 'label', e.target.value)}
                            />
                          </div>
                          <div className="space-y-1">
                            <Label className="text-xs">Field Type</Label>
                            <select
                              value={field.type}
                              onChange={(e) => handleFieldChange(stepIndex, fieldIndex, 'type', e.target.value)}
                              className="form-select text-sm"
                            >
                              {FIELD_TYPES.map(type => (
                                <option key={type.value} value={type.value}>{type.label}</option>
                              ))}
                            </select>
                          </div>
                        </div>
                        
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                          <div className="space-y-1">
                            <Label className="text-xs">Placeholder</Label>
                            <Input
                              size="sm"
                              placeholder="Placeholder text"
                              value={field.placeholder}
                              onChange={(e) => handleFieldChange(stepIndex, fieldIndex, 'placeholder', e.target.value)}
                            />
                          </div>
                          <div className="flex items-center space-x-2 mt-6">
                            <Checkbox
                              checked={field.required}
                              onCheckedChange={(checked) => handleFieldChange(stepIndex, fieldIndex, 'required', checked)}
                            />
                            <Label className="text-xs">Required Field</Label>
                          </div>
                        </div>
                        
                        {field.type === 'select' && (
                          <div className="space-y-1">
                            <Label className="text-xs">Options (comma-separated)</Label>
                            <Input
                              size="sm"
                              placeholder="Option 1, Option 2, Option 3"
                              value={field.options?.join(', ') || ''}
                              onChange={(e) => handleFieldChange(
                                stepIndex, 
                                fieldIndex, 
                                'options', 
                                e.target.value.split(',').map(opt => opt.trim()).filter(Boolean)
                              )}
                            />
                          </div>
                        )}
                      </div>
                    ))}
                  </div>
                </div>
              ))}
            </CardContent>
          </Card>

          {/* Report Structure */}
          <Card>
            <CardHeader>
              <div className="flex items-center justify-between">
                <div>
                  <CardTitle className="text-heading">Report Structure</CardTitle>
                  <CardDescription>
                    Define the structure of generated reports
                  </CardDescription>
                </div>
                <Button 
                  variant="outline" 
                  size="sm"
                  onClick={addReportSection}
                  data-testid="add-report-section-btn"
                >
                  <Plus className="w-4 h-4 mr-2" />
                  Add Section
                </Button>
              </div>
            </CardHeader>
            <CardContent className="space-y-4">
              {template.report_structure.map((section, sectionIndex) => (
                <div key={section.id} className="p-4 border border-slate-200 rounded-lg space-y-4">
                  <div className="flex items-center justify-between">
                    <Badge variant="secondary">Section {sectionIndex + 1}</Badge>
                    <Button 
                      variant="ghost" 
                      size="sm"
                      onClick={() => removeReportSection(sectionIndex)}
                    >
                      <Trash2 className="w-4 h-4 text-red-500" />
                    </Button>
                  </div>
                  
                  <div className="space-y-3">
                    <div className="space-y-2">
                      <Label>Section Title</Label>
                      <Input
                        placeholder="e.g., Executive Summary"
                        value={section.title}
                        onChange={(e) => handleReportSectionChange(sectionIndex, 'title', e.target.value)}
                      />
                    </div>
                    <div className="space-y-2">
                      <Label>Content Template</Label>
                      <Textarea
                        placeholder="Template content for this section..."
                        value={section.content_template}
                        onChange={(e) => handleReportSectionChange(sectionIndex, 'content_template', e.target.value)}
                      />
                    </div>
                  </div>
                </div>
              ))}
            </CardContent>
          </Card>
        </div>

        {/* Sidebar */}
        <div className="space-y-6">
          {/* Template Preview */}
          <Card>
            <CardHeader>
              <CardTitle className="text-base text-heading">Template Summary</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-3 text-sm">
                <div className="flex justify-between">
                  <span className="text-slate-600">Steps</span>
                  <span className="font-medium">{template.steps.length}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-slate-600">Total Fields</span>
                  <span className="font-medium">
                    {template.steps.reduce((sum, step) => sum + (step.fields?.length || 0), 0)}
                  </span>
                </div>
                <div className="flex justify-between">
                  <span className="text-slate-600">Report Sections</span>
                  <span className="font-medium">{template.report_structure.length}</span>
                </div>
                <Separator />
                <div className="space-y-2">
                  <span className="text-slate-600 text-xs">Category</span>
                  <Badge variant="secondary">{template.category}</Badge>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Help */}
          <Card>
            <CardHeader>
              <CardTitle className="text-base text-heading">Template Builder Help</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-3 text-sm text-slate-600">
                <p>• Create logical assessment steps</p>
                <p>• Add relevant fields for each step</p>
                <p>• Use different field types for better UX</p>
                <p>• Define comprehensive report sections</p>
                <p>• Preview before saving</p>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
};

export default TemplateEditor;