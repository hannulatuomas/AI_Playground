import React, { useState, useEffect } from "react";
import axios from "axios";
import { 
  Plus, 
  Search, 
  Filter,
  Play,
  FileText,
  Trash2,
  MoreHorizontal,
  Clock,
  CheckCircle2,
  FileCheck
} from "lucide-react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { 
  DropdownMenu, 
  DropdownMenuContent, 
  DropdownMenuItem, 
  DropdownMenuTrigger 
} from "@/components/ui/dropdown-menu";
import { useNavigate } from "react-router-dom";
import { toast } from "sonner";

const BACKEND_URL = process.env.REACT_APP_BACKEND_URL;
const API = `${BACKEND_URL}/api`;

const Assessments = () => {
  const navigate = useNavigate();
  const [assessments, setAssessments] = useState([]);
  const [loading, setLoading] = useState(true);
  const [searchQuery, setSearchQuery] = useState("");
  const [selectedStatus, setSelectedStatus] = useState("all");

  useEffect(() => {
    fetchAssessments();
  }, []);

  const fetchAssessments = async () => {
    try {
      const response = await axios.get(`${API}/assessments`);
      setAssessments(response.data);
    } catch (error) {
      console.error("Failed to fetch assessments:", error);
      toast.error("Failed to load assessments");
    } finally {
      setLoading(false);
    }
  };

  const handleDeleteAssessment = async (assessmentId, assessmentName) => {
    if (window.confirm(`Are you sure you want to delete "${assessmentName}"? This action cannot be undone.`)) {
      try {
        await axios.delete(`${API}/assessments/${assessmentId}`);
        toast.success("Assessment deleted successfully");
        fetchAssessments();
      } catch (error) {
        console.error("Failed to delete assessment:", error);
        toast.error("Failed to delete assessment");
      }
    }
  };

  const getStatusIcon = (status) => {
    switch (status) {
      case 'completed':
        return <CheckCircle2 className="w-4 h-4 text-green-600" />;
      case 'in_progress':
        return <Play className="w-4 h-4 text-blue-600" />;
      case 'draft':
        return <FileText className="w-4 h-4 text-slate-600" />;
      default:
        return <Clock className="w-4 h-4 text-slate-400" />;
    }
  };

  const getStatusBadgeVariant = (status) => {
    switch (status) {
      case 'completed': return 'default';
      case 'in_progress': return 'secondary';
      case 'draft': return 'outline';
      default: return 'outline';
    }
  };

  const formatDate = (dateString) => {
    return new Date(dateString).toLocaleDateString('en-US', {
      month: 'short',
      day: 'numeric',
      year: 'numeric'
    });
  };

  // Filter assessments
  const filteredAssessments = assessments.filter(assessment => {
    const matchesSearch = assessment.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
                         assessment.template_name.toLowerCase().includes(searchQuery.toLowerCase());
    const matchesStatus = selectedStatus === "all" || assessment.status === selectedStatus;
    return matchesSearch && matchesStatus;
  });

  const statuses = ["all", "draft", "in_progress", "completed", "archived"];

  if (loading) {
    return (
      <div className="space-y-6 animate-fade-in">
        <div className="space-y-4">
          {[...Array(5)].map((_, i) => (
            <Card key={i} className="animate-pulse">
              <CardContent className="p-6">
                <div className="flex items-center justify-between">
                  <div className="space-y-2 flex-1">
                    <div className="h-4 bg-slate-200 rounded w-1/3"></div>
                    <div className="h-3 bg-slate-200 rounded w-1/2"></div>
                  </div>
                  <div className="w-20 h-6 bg-slate-200 rounded"></div>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6 animate-fade-in">
      {/* Header */}
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between">
        <div>
          <h1 className="text-2xl font-bold text-slate-900 text-heading">Assessments</h1>
          <p className="text-slate-600 mt-1">Manage your security assessments</p>
        </div>
        <Button 
          onClick={() => navigate('/assessments/new')}
          className="mt-4 sm:mt-0"
          data-testid="new-assessment-btn"
        >
          <Plus className="w-4 h-4 mr-2" />
          New Assessment
        </Button>
      </div>

      {/* Filters */}
      <div className="flex flex-col sm:flex-row gap-4">
        <div className="relative flex-1">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-slate-400" />
          <Input
            placeholder="Search assessments..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className="pl-10"
            data-testid="assessment-search"
          />
        </div>
        <div className="flex items-center space-x-2">
          <Filter className="w-4 h-4 text-slate-500" />
          <select
            value={selectedStatus}
            onChange={(e) => setSelectedStatus(e.target.value)}
            className="form-select min-w-[150px]"
            data-testid="status-filter"
          >
            {statuses.map(status => (
              <option key={status} value={status}>
                {status === "all" ? "All Statuses" : status.replace('_', ' ').toUpperCase()}
              </option>
            ))}
          </select>
        </div>
      </div>

      {/* Assessments List */}
      {filteredAssessments.length > 0 ? (
        <div className="space-y-4">
          {filteredAssessments.map((assessment) => (
            <Card 
              key={assessment.id} 
              className="hover-lift cursor-pointer group"
              onClick={(e) => {
                e.preventDefault();
                navigate(`/assessments/${assessment.id}/workflow`);
              }}
            >
              <CardContent className="p-6">
                <div className="flex items-center justify-between">
                  <div className="flex-1 min-w-0">
                    <div className="flex items-center space-x-3 mb-2">
                      {getStatusIcon(assessment.status)}
                      <CardTitle className="text-lg text-heading truncate">
                        {assessment.name}
                      </CardTitle>
                      <Badge variant={getStatusBadgeVariant(assessment.status)}>
                        {assessment.status.replace('_', ' ')}
                      </Badge>
                    </div>
                    
                    <div className="space-y-1 text-sm text-slate-600">
                      <p>Template: {assessment.template_name}</p>
                      <p>Created: {formatDate(assessment.created_at)}</p>
                      <p>Last Updated: {formatDate(assessment.updated_at)}</p>
                    </div>
                  </div>
                  
                  <div className="flex items-center space-x-2">
                    <DropdownMenu>
                      <DropdownMenuTrigger asChild onClick={(e) => e.stopPropagation()}>
                        <Button 
                          variant="ghost" 
                          size="sm" 
                          className="opacity-0 group-hover:opacity-100 transition-opacity"
                          data-testid={`assessment-menu-${assessment.id}`}
                        >
                          <MoreHorizontal className="w-4 h-4" />
                        </Button>
                      </DropdownMenuTrigger>
                      <DropdownMenuContent align="end">
                        <DropdownMenuItem onClick={(e) => {
                          e.stopPropagation();
                          navigate(`/assessments/${assessment.id}/workflow`);
                        }}>
                          <Play className="w-4 h-4 mr-2" />
                          Continue Assessment
                        </DropdownMenuItem>
                        <DropdownMenuItem onClick={(e) => {
                          e.stopPropagation();
                          // TODO: Generate report
                        }}>
                          <FileCheck className="w-4 h-4 mr-2" />
                          Generate Report
                        </DropdownMenuItem>
                        <DropdownMenuItem 
                          onClick={(e) => {
                            e.stopPropagation();
                            handleDeleteAssessment(assessment.id, assessment.name);
                          }}
                          className="text-red-600 focus:text-red-600"
                        >
                          <Trash2 className="w-4 h-4 mr-2" />
                          Delete
                        </DropdownMenuItem>
                      </DropdownMenuContent>
                    </DropdownMenu>
                  </div>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>
      ) : (
        <div className="text-center py-12">
          <FileText className="w-16 h-16 text-slate-300 mx-auto mb-4" />
          <h3 className="text-lg font-medium text-slate-900 mb-2">
            {searchQuery || selectedStatus !== "all" ? "No matching assessments" : "No assessments yet"}
          </h3>
          <p className="text-slate-500 mb-6">
            {searchQuery || selectedStatus !== "all"
              ? "Try adjusting your search or filters"
              : "Create your first security assessment to get started"
            }
          </p>
          {(!searchQuery && selectedStatus === "all") && (
            <Button 
              onClick={() => navigate('/assessments/new')}
              data-testid="create-first-assessment"
            >
              <Plus className="w-4 h-4 mr-2" />
              Create Your First Assessment
            </Button>
          )}
        </div>
      )}

      {/* Assessment count */}
      {filteredAssessments.length > 0 && (
        <div className="text-center text-sm text-slate-500">
          Showing {filteredAssessments.length} of {assessments.length} assessments
        </div>
      )}
    </div>
  );
};

export default Assessments;