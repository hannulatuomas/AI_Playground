import React, { useState, useEffect } from "react";
import { useParams, useNavigate } from "react-router-dom";
import axios from "axios";
import { 
  ArrowLeft,
  ArrowRight,
  Save,
  FileText,
  CheckSquare,
  Square,
  Upload,
  Link,
  Hash,
  Type,
  AlignLeft
} from "lucide-react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { Checkbox } from "@/components/ui/checkbox";
import { toast } from "sonner";

const BACKEND_URL = process.env.REACT_APP_BACKEND_URL;
const API = `${BACKEND_URL}/api`;

const AssessmentWorkflow = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  const [assessment, setAssessment] = useState(null);
  const [template, setTemplate] = useState(null);
  const [currentStepIndex, setCurrentStepIndex] = useState(0);
  const [stepData, setStepData] = useState({});
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);

  useEffect(() => {
    fetchAssessmentData();
  }, [id]);

  const fetchAssessmentData = async () => {
    try {
      // Fetch assessment
      const assessmentResponse = await axios.get(`${API}/assessments/${id}`);
      const assessmentData = assessmentResponse.data;
      setAssessment(assessmentData);
      setCurrentStepIndex(assessmentData.current_step || 0);
      setStepData(assessmentData.data || {});

      // Fetch template
      const templateResponse = await axios.get(`${API}/templates/${assessmentData.template_id}`);
      setTemplate(templateResponse.data);
    } catch (error) {
      console.error("Failed to fetch assessment data:", error);
      toast.error("Failed to load assessment");
      navigate('/assessments');
    } finally {
      setLoading(false);
    }
  };

  const handleSaveProgress = async () => {
    setSaving(true);
    try {
      await axios.put(`${API}/assessments/${id}`, {
        data: stepData,
        current_step: currentStepIndex,
        status: 'in_progress'
      });
      toast.success("Progress saved successfully");
    } catch (error) {
      console.error("Failed to save progress:", error);
      toast.error("Failed to save progress");
    } finally {
      setSaving(false);
    }
  };

  const handleFieldChange = (stepId, fieldId, value) => {
    setStepData(prev => ({
      ...prev,
      [stepId]: {
        ...prev[stepId],
        [fieldId]: value
      }
    }));
  };

  const handleNextStep = () => {
    if (currentStepIndex < template.steps.length - 1) {
      setCurrentStepIndex(currentStepIndex + 1);
      handleSaveProgress();
    }
  };

  const handlePreviousStep = () => {
    if (currentStepIndex > 0) {
      setCurrentStepIndex(currentStepIndex - 1);
    }
  };

  const handleCompleteAssessment = async () => {
    setSaving(true);
    try {
      await axios.put(`${API}/assessments/${id}`, {
        data: stepData,
        current_step: currentStepIndex,
        status: 'completed'
      });
      toast.success("Assessment completed successfully");
      navigate('/assessments');
    } catch (error) {
      console.error("Failed to complete assessment:", error);
      toast.error("Failed to complete assessment");
    } finally {
      setSaving(false);
    }
  };

  const getFieldIcon = (fieldType) => {
    switch (fieldType) {
      case 'text':
      case 'url':
        return <Type className="w-4 h-4" />;
      case 'textarea':
        return <AlignLeft className="w-4 h-4" />;
      case 'number':
        return <Hash className="w-4 h-4" />;
      case 'checkbox':
        return <CheckSquare className="w-4 h-4" />;
      case 'file':
        return <Upload className="w-4 h-4" />;
      default:
        return <Type className="w-4 h-4" />;
    }
  };

  const renderField = (field, stepId) => {
    const fieldValue = stepData[stepId]?.[field.id] || '';
    
    switch (field.type) {
      case 'text':
      case 'url':
        return (
          <Input
            type={field.type}
            placeholder={field.placeholder || field.label}
            value={fieldValue}
            onChange={(e) => handleFieldChange(stepId, field.id, e.target.value)}
            required={field.required}
            data-testid={`field-${field.id}`}
          />
        );
      
      case 'textarea':
        return (
          <Textarea
            placeholder={field.placeholder || field.label}
            value={fieldValue}
            onChange={(e) => handleFieldChange(stepId, field.id, e.target.value)}
            required={field.required}
            className="min-h-[120px]"
            data-testid={`field-${field.id}`}
          />
        );
      
      case 'number':
        return (
          <Input
            type="number"
            placeholder={field.placeholder || "0"}
            value={fieldValue}
            onChange={(e) => handleFieldChange(stepId, field.id, parseInt(e.target.value) || 0)}
            required={field.required}
            data-testid={`field-${field.id}`}
          />
        );
      
      case 'checkbox':
        return (
          <div className="flex items-center space-x-2">
            <Checkbox
              checked={fieldValue === true}
              onCheckedChange={(checked) => handleFieldChange(stepId, field.id, checked)}
              data-testid={`field-${field.id}`}
            />
            <Label className="text-sm text-slate-600">
              {field.label}
            </Label>
          </div>
        );
      
      case 'select':
        return (
          <select
            value={fieldValue}
            onChange={(e) => handleFieldChange(stepId, field.id, e.target.value)}
            required={field.required}
            className="form-select"
            data-testid={`field-${field.id}`}
          >
            <option value="">Select {field.label}</option>
            {field.options?.map(option => (
              <option key={option} value={option}>{option}</option>
            ))}
          </select>
        );
      
      case 'file':
        return (
          <div className="border-2 border-dashed border-slate-300 rounded-lg p-6 text-center">
            <Upload className="w-8 h-8 text-slate-400 mx-auto mb-2" />
            <p className="text-sm text-slate-600">Click to upload or drag and drop</p>
            <p className="text-xs text-slate-500 mt-1">Files, screenshots, evidence</p>
          </div>
        );
      
      default:
        return (
          <Input
            placeholder={field.placeholder || field.label}
            value={fieldValue}
            onChange={(e) => handleFieldChange(stepId, field.id, e.target.value)}
            required={field.required}
            data-testid={`field-${field.id}`}
          />
        );
    }
  };

  if (loading) {
    return (
      <div className="space-y-6 animate-fade-in">
        <div className="animate-pulse space-y-6">
          <div className="h-8 bg-slate-200 rounded w-1/3"></div>
          <div className="h-4 bg-slate-200 rounded w-full"></div>
          <Card>
            <CardContent className="p-6 space-y-4">
              <div className="h-6 bg-slate-200 rounded w-1/2"></div>
              <div className="h-4 bg-slate-200 rounded w-3/4"></div>
              <div className="space-y-3">
                {[...Array(3)].map((_, i) => (
                  <div key={i} className="h-10 bg-slate-200 rounded"></div>
                ))}
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    );
  }

  if (!assessment || !template) {
    return (
      <div className="text-center py-12">
        <p className="text-slate-600">Assessment not found</p>
        <Button onClick={() => navigate('/assessments')} className="mt-4">
          Back to Assessments
        </Button>
      </div>
    );
  }

  const currentStep = template.steps[currentStepIndex];
  const progressPercentage = ((currentStepIndex + 1) / template.steps.length) * 100;

  return (
    <div className="space-y-6 animate-fade-in">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-4">
          <Button 
            variant="ghost" 
            size="sm" 
            onClick={() => navigate('/assessments')}
            data-testid="back-to-assessments"
          >
            <ArrowLeft className="w-4 h-4 mr-2" />
            Back to Assessments
          </Button>
        </div>
        
        <div className="flex items-center space-x-3">
          <Button 
            variant="outline" 
            onClick={handleSaveProgress}
            disabled={saving}
            data-testid="save-progress-btn"
          >
            <Save className="w-4 h-4 mr-2" />
            {saving ? "Saving..." : "Save Progress"}
          </Button>
        </div>
      </div>

      {/* Assessment Info */}
      <div>
        <h1 className="text-2xl font-bold text-slate-900 text-heading">{assessment.name}</h1>
        <div className="flex items-center space-x-4 mt-2">
          <p className="text-slate-600">Template: {template.name}</p>
          <Badge variant="secondary">{assessment.status.replace('_', ' ')}</Badge>
        </div>
      </div>

      {/* Progress Bar */}
      <div className="space-y-2">
        <div className="flex items-center justify-between text-sm">
          <span className="text-slate-600">
            Step {currentStepIndex + 1} of {template.steps.length}
          </span>
          <span className="text-slate-600">
            {Math.round(progressPercentage)}% Complete
          </span>
        </div>
        <Progress value={progressPercentage} className="h-2" />
      </div>

      {/* Current Step */}
      <Card>
        <CardHeader>
          <CardTitle className="text-xl text-heading flex items-center">
            <FileText className="w-5 h-5 mr-3 text-blue-600" />
            {currentStep.name}
          </CardTitle>
          {currentStep.description && (
            <CardDescription className="text-base">
              {currentStep.description}
            </CardDescription>
          )}
        </CardHeader>
        <CardContent className="space-y-6">
          {/* Instructions */}
          <div className="p-4 bg-blue-50 border border-blue-200 rounded-lg">
            <h4 className="font-medium text-blue-900 mb-2">Instructions</h4>
            <p className="text-blue-800 text-sm">{currentStep.instructions}</p>
          </div>

          {/* Fields */}
          <div className="space-y-6">
            {currentStep.fields?.map((field) => (
              <div key={field.id} className="space-y-2">
                <Label className="flex items-center space-x-2">
                  {getFieldIcon(field.type)}
                  <span>
                    {field.label}
                    {field.required && <span className="text-red-500 ml-1">*</span>}
                  </span>
                </Label>
                {renderField(field, currentStep.id)}
              </div>
            ))}
          </div>

          {/* Navigation */}
          <div className="flex items-center justify-between pt-6 border-t border-slate-200">
            <Button 
              variant="outline" 
              onClick={handlePreviousStep}
              disabled={currentStepIndex === 0}
              data-testid="previous-step-btn"
            >
              <ArrowLeft className="w-4 h-4 mr-2" />
              Previous
            </Button>

            {currentStepIndex < template.steps.length - 1 ? (
              <Button 
                onClick={handleNextStep}
                data-testid="next-step-btn"
              >
                Next Step
                <ArrowRight className="w-4 h-4 ml-2" />
              </Button>
            ) : (
              <Button 
                onClick={handleCompleteAssessment}
                disabled={saving}
                data-testid="complete-assessment-btn"
              >
                {saving ? "Completing..." : "Complete Assessment"}
                <CheckSquare className="w-4 h-4 ml-2" />
              </Button>
            )}
          </div>
        </CardContent>
      </Card>

      {/* Step Navigation Sidebar */}
      <Card>
        <CardHeader>
          <CardTitle className="text-base text-heading">Assessment Steps</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-2">
            {template.steps.map((step, index) => (
              <div 
                key={step.id}
                className={`flex items-center space-x-3 p-2 rounded-lg cursor-pointer transition-colors ${
                  index === currentStepIndex 
                    ? 'bg-blue-50 border border-blue-200' 
                    : index < currentStepIndex 
                      ? 'bg-green-50 hover:bg-green-100' 
                      : 'hover:bg-slate-50'
                }`}
                onClick={() => setCurrentStepIndex(index)}
                data-testid={`step-nav-${index}`}
              >
                <div className={`w-6 h-6 rounded-full flex items-center justify-center text-xs font-medium ${
                  index === currentStepIndex 
                    ? 'bg-blue-600 text-white' 
                    : index < currentStepIndex 
                      ? 'bg-green-600 text-white' 
                      : 'bg-slate-300 text-slate-600'
                }`}>
                  {index + 1}
                </div>
                <span className={`text-sm ${
                  index === currentStepIndex ? 'font-medium text-blue-900' : 'text-slate-700'
                }`}>
                  {step.name}
                </span>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default AssessmentWorkflow;