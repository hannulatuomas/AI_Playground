import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import axios from "axios";
import { 
  Plus, 
  FileText, 
  Edit, 
  Trash2, 
  Search,
  Filter,
  MoreHorizontal,
  Copy,
  ExternalLink,
  Shield,
  Network,
  Cloud,
  UserCheck,
  Wifi,
  Building,
  Cpu,
  Bug,
  Eye,
  Search as SearchIcon,
  HardDrive,
  AlertTriangle,
  Code,
  Database,
  Brain,
  Container,
  GitBranch,
  Coins,
  Truck,
  Mail,
  Globe,
  Lock,
  Activity,
  Zap,
  Users
} from "lucide-react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { 
  DropdownMenu, 
  DropdownMenuContent, 
  DropdownMenuItem, 
  DropdownMenuTrigger 
} from "@/components/ui/dropdown-menu";
import { toast } from "sonner";

const BACKEND_URL = process.env.REACT_APP_BACKEND_URL;
const API = `${BACKEND_URL}/api`;

const Templates = () => {
  const navigate = useNavigate();
  const [templates, setTemplates] = useState([]);
  const [loading, setLoading] = useState(true);
  const [searchQuery, setSearchQuery] = useState("");
  const [selectedCategory, setSelectedCategory] = useState("all");

  useEffect(() => {
    fetchTemplates();
  }, []);

  const fetchTemplates = async () => {
    try {
      const response = await axios.get(`${API}/templates`);
      setTemplates(response.data);
    } catch (error) {
      console.error("Failed to fetch templates:", error);
      toast.error("Failed to load templates");
    } finally {
      setLoading(false);
    }
  };

  const handleDeleteTemplate = async (templateId, templateName) => {
    if (window.confirm(`Are you sure you want to delete "${templateName}"? This action cannot be undone.`)) {
      try {
        await axios.delete(`${API}/templates/${templateId}`);
        toast.success("Template deleted successfully");
        fetchTemplates();
      } catch (error) {
        console.error("Failed to delete template:", error);
        toast.error("Failed to delete template");
      }
    }
  };

  const handleDuplicateTemplate = async (template) => {
    try {
      const duplicatedTemplate = {
        name: `${template.name} (Copy)`,
        description: template.description,
        category: template.category,
        steps: template.steps,
        report_structure: template.report_structure
      };
      
      const response = await axios.post(`${API}/templates`, duplicatedTemplate);
      toast.success("Template duplicated successfully");
      fetchTemplates();
    } catch (error) {
      console.error("Failed to duplicate template:", error);
      toast.error("Failed to duplicate template");
    }
  };

  const formatDate = (dateString) => {
    return new Date(dateString).toLocaleDateString('en-US', {
      month: 'short',
      day: 'numeric',
      year: 'numeric'
    });
  };

  // Filter templates based on search and category
  const filteredTemplates = templates.filter(template => {
    const matchesSearch = template.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
                         template.description.toLowerCase().includes(searchQuery.toLowerCase());
    const matchesCategory = selectedCategory === "all" || template.category === selectedCategory;
    return matchesSearch && matchesCategory;
  });

  // Get unique categories
  const categories = ["all", ...new Set(templates.map(t => t.category))];

  const getTemplateIcon = (category) => {
    switch (category.toLowerCase()) {
      case 'web application':
        return <Shield className="w-5 h-5 text-blue-600" />;
      case 'api security':
        return <Zap className="w-5 h-5 text-green-600" />;
      case 'mobile security':
        return <Users className="w-5 h-5 text-purple-600" />;
      case 'network security':
        return <Network className="w-5 h-5 text-indigo-600" />;
      case 'cloud security':
        return <Cloud className="w-5 h-5 text-sky-600" />;
      case 'social engineering':
        return <UserCheck className="w-5 h-5 text-orange-600" />;
      case 'wireless security':
        return <Wifi className="w-5 h-5 text-teal-600" />;
      case 'physical security':
        return <Building className="w-5 h-5 text-amber-600" />;
      case 'iot security':
        return <Cpu className="w-5 h-5 text-pink-600" />;
      case 'malware analysis':
        return <Bug className="w-5 h-5 text-red-600" />;
      case 'osint':
        return <SearchIcon className="w-5 h-5 text-cyan-600" />;
      case 'digital forensics':
        return <HardDrive className="w-5 h-5 text-slate-700" />;
      case 'compliance':
        return <FileText className="w-5 h-5 text-emerald-600" />;
      case 'red team':
        return <AlertTriangle className="w-5 h-5 text-red-500" />;
      case 'code security':
        return <Code className="w-5 h-5 text-violet-600" />;
      case 'database security':
        return <Database className="w-5 h-5 text-blue-700" />;
      case 'threat intelligence':
        return <Brain className="w-5 h-5 text-purple-700" />;
      case 'incident response':
        return <AlertTriangle className="w-5 h-5 text-yellow-600" />;
      case 'container security':
        return <Container className="w-5 h-5 text-blue-500" />;
      case 'devsecops':
        return <GitBranch className="w-5 h-5 text-green-700" />;
      case 'blockchain security':
        return <Coins className="w-5 h-5 text-yellow-500" />;
      case 'supply chain security':
        return <Truck className="w-5 h-5 text-orange-700" />;
      case 'email security':
        return <Mail className="w-5 h-5 text-blue-400" />;
      case 'dns security':
        return <Globe className="w-5 h-5 text-green-500" />;
      case 'zero trust':
        return <Lock className="w-5 h-5 text-gray-700" />;
      default:
        return <Activity className="w-5 h-5 text-slate-600" />;
    }
  };

  if (loading) {
    return (
      <div className="space-y-6 animate-fade-in">
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {[...Array(6)].map((_, i) => (
            <Card key={i} className="animate-pulse">
              <CardHeader className="space-y-2">
                <div className="h-4 bg-slate-200 rounded w-3/4"></div>
                <div className="h-3 bg-slate-200 rounded w-1/2"></div>
              </CardHeader>
              <CardContent>
                <div className="space-y-2">
                  <div className="h-3 bg-slate-200 rounded"></div>
                  <div className="h-3 bg-slate-200 rounded w-5/6"></div>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6 animate-fade-in">
      {/* Header */}
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between">
        <div>
          <h1 className="text-2xl font-bold text-slate-900 text-heading">Assessment Templates</h1>
          <p className="text-slate-600 mt-1">Create and manage your security assessment templates</p>
        </div>
        <Button 
          onClick={() => navigate('/templates/new')}
          className="mt-4 sm:mt-0"
          data-testid="create-template-btn"
        >
          <Plus className="w-4 h-4 mr-2" />
          Create Template
        </Button>
      </div>

      {/* Filters */}
      <div className="flex flex-col sm:flex-row gap-4">
        <div className="relative flex-1">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-slate-400" />
          <Input
            placeholder="Search templates..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className="pl-10"
            data-testid="template-search"
          />
        </div>
        <div className="flex items-center space-x-2">
          <Filter className="w-4 h-4 text-slate-500" />
          <select
            value={selectedCategory}
            onChange={(e) => setSelectedCategory(e.target.value)}
            className="form-select min-w-[150px]"
            data-testid="category-filter"
          >
            {categories.map(category => (
              <option key={category} value={category}>
                {category === "all" ? "All Categories" : category}
              </option>
            ))}
          </select>
        </div>
      </div>

      {/* Templates Grid */}
      {filteredTemplates.length > 0 ? (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {filteredTemplates.map((template) => (
            <Card key={template.id} className="hover-lift group">
              <CardHeader className="pb-3">
                <div className="flex items-start justify-between">
                  <div className="flex items-start space-x-3 flex-1 min-w-0">
                    <div className="mt-1 flex-shrink-0">
                      {getTemplateIcon(template.category)}
                    </div>
                    <div className="flex-1 min-w-0">
                      <CardTitle className="text-lg mb-1 text-heading truncate">
                        {template.name}
                      </CardTitle>
                      <Badge variant="secondary" className="text-xs">
                        {template.category}
                      </Badge>
                    </div>
                  </div>
                  <DropdownMenu>
                    <DropdownMenuTrigger asChild>
                      <Button 
                        variant="ghost" 
                        size="sm" 
                        className="opacity-0 group-hover:opacity-100 transition-opacity"
                        data-testid={`template-menu-${template.id}`}
                      >
                        <MoreHorizontal className="w-4 h-4" />
                      </Button>
                    </DropdownMenuTrigger>
                    <DropdownMenuContent align="end">
                      <DropdownMenuItem onClick={() => handleDuplicateTemplate(template)}>
                        <Copy className="w-4 h-4 mr-2" />
                        Duplicate
                      </DropdownMenuItem>
                      <DropdownMenuItem onClick={() => navigate(`/templates/${template.id}/edit`)}>
                        <Edit className="w-4 h-4 mr-2" />
                        Edit
                      </DropdownMenuItem>
                      <DropdownMenuItem onClick={() => navigate(`/assessments/new?template=${template.id}`)}>
                        <ExternalLink className="w-4 h-4 mr-2" />
                        Use Template
                      </DropdownMenuItem>
                      <DropdownMenuItem 
                        onClick={() => handleDeleteTemplate(template.id, template.name)}
                        className="text-red-600 focus:text-red-600"
                      >
                        <Trash2 className="w-4 h-4 mr-2" />
                        Delete
                      </DropdownMenuItem>
                    </DropdownMenuContent>
                  </DropdownMenu>
                </div>
              </CardHeader>
              <CardContent className="pt-0">
                <CardDescription className="text-sm text-slate-600 mb-4 line-clamp-2">
                  {template.description}
                </CardDescription>
                
                <div className="space-y-3">
                  {/* Template Stats */}
                  <div className="flex items-center justify-between text-sm text-slate-500">
                    <span>{template.steps?.length || 0} steps</span>
                    <span>{template.report_structure?.length || 0} report sections</span>
                  </div>
                  
                  {/* Steps Preview */}
                  {template.steps && template.steps.length > 0 && (
                    <div className="space-y-1">
                      <p className="text-xs font-medium text-slate-700">Steps:</p>
                      <div className="text-xs text-slate-500">
                        {template.steps.slice(0, 3).map((step, index) => (
                          <div key={step.id} className="truncate">
                            {index + 1}. {step.name}
                          </div>
                        ))}
                        {template.steps.length > 3 && (
                          <div className="text-slate-400">
                            +{template.steps.length - 3} more...
                          </div>
                        )}
                      </div>
                    </div>
                  )}
                  
                  {/* Date */}
                  <div className="text-xs text-slate-400 pt-2 border-t border-slate-100">
                    Created {formatDate(template.created_at)}
                  </div>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>
      ) : (
        <div className="text-center py-12">
          <FileText className="w-16 h-16 text-slate-300 mx-auto mb-4" />
          <h3 className="text-lg font-medium text-slate-900 mb-2">
            {searchQuery || selectedCategory !== "all" ? "No matching templates" : "No templates yet"}
          </h3>
          <p className="text-slate-500 mb-6">
            {searchQuery || selectedCategory !== "all" 
              ? "Try adjusting your search or filters"
              : "Create your first assessment template to get started"
            }
          </p>
          {(!searchQuery && selectedCategory === "all") && (
            <Button 
              onClick={() => navigate('/templates/new')}
              data-testid="create-first-template"
            >
              <Plus className="w-4 h-4 mr-2" />
              Create Your First Template
            </Button>
          )}
        </div>
      )}

      {/* Template count */}
      {filteredTemplates.length > 0 && (
        <div className="text-center text-sm text-slate-500">
          Showing {filteredTemplates.length} of {templates.length} templates
        </div>
      )}
    </div>
  );
};

export default Templates;