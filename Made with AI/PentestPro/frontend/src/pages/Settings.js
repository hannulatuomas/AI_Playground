import React, { useState, useEffect } from 'react';
import { useAuth } from '../contexts/AuthContext';
import { useTheme } from '../contexts/ThemeContext';
import { Card, CardHeader, CardTitle, CardContent } from '../components/ui/card';
import { Button } from '../components/ui/button';
import { Input } from '../components/ui/input';
import { Label } from '../components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../components/ui/select';
import { Switch } from '../components/ui/switch';
import { Separator } from '../components/ui/separator';
import { Badge } from '../components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '../components/ui/tabs';
import { Settings as SettingsIcon, Palette, Bell, Layout, FileText, User, Shield, Check } from 'lucide-react';
import { useToast } from '../hooks/use-toast';

const Settings = () => {
  const { user, updateUser } = useAuth();
  const { theme, themes, updateTheme, loading: themeLoading } = useTheme();
  const { toast } = useToast();
  
  const [settings, setSettings] = useState({
    theme: 'light',
    notifications_enabled: true,
    email_notifications: true,
    dashboard_layout: 'default',
    report_auto_generate: false,
    reports_per_page: 10,
  });
  
  const [profileData, setProfileData] = useState({
    username: '',
    full_name: '',
    organization: '',
    team: '',
  });
  
  const [loading, setLoading] = useState(false);
  const [loadingProfile, setLoadingProfile] = useState(false);

  const API_BASE = process.env.REACT_APP_BACKEND_URL || 'http://localhost:8001';

  useEffect(() => {
    if (user) {
      setSettings(user.settings || {});
      setProfileData({
        username: user.username || '',
        full_name: user.full_name || '',
        organization: user.organization || '',
        team: user.team || '',
      });
    }
  }, [user]);

  const handleSettingsChange = (key, value) => {
    setSettings(prev => ({
      ...prev,
      [key]: value
    }));
  };

  const handleProfileChange = (e) => {
    const { name, value } = e.target;
    setProfileData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const saveSettings = async () => {
    setLoading(true);
    try {
      const response = await fetch(`${API_BASE}/api/user/settings`, {
        method: 'PUT',
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('token')}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(settings),
      });

      if (response.ok) {
        toast.success('Settings saved successfully');
      } else {
        toast.error('Failed to save settings');
      }
    } catch (error) {
      console.error('Error saving settings:', error);
      toast.error('Error saving settings');
    } finally {
      setLoading(false);
    }
  };

  const saveProfile = async () => {
    setLoadingProfile(true);
    try {
      const result = await updateUser(profileData);
      if (result.success) {
        toast.success('Profile updated successfully');
      } else {
        toast.error(result.error || 'Failed to update profile');
      }
    } catch (error) {
      console.error('Error updating profile:', error);
      toast.error('Error updating profile');
    } finally {
      setLoadingProfile(false);
    }
  };

  const handleThemeChange = async (newTheme) => {
    await updateTheme(newTheme);
    setSettings(prev => ({
      ...prev,
      theme: newTheme
    }));
  };

  const dashboardLayouts = [
    { value: 'default', label: 'Default', description: 'Standard grid layout' },
    { value: 'compact', label: 'Compact', description: 'Condensed view with more items' },
    { value: 'expanded', label: 'Expanded', description: 'Larger cards with more details' },
  ];

  return (
    <div className="container mx-auto px-4 py-6 sm:py-8 max-w-4xl">
      <div className="flex items-center space-x-3 mb-6 sm:mb-8">
        <SettingsIcon className="w-8 h-8 text-blue-600" />
        <div>
          <h1 className="text-3xl font-bold text-gray-900">Settings</h1>
          <p className="text-gray-600">Manage your account preferences and application settings</p>
        </div>
      </div>

      <Tabs defaultValue="appearance" className="space-y-6">
        <TabsList className="grid w-full grid-cols-2 sm:grid-cols-3 lg:grid-cols-5 gap-1">
          <TabsTrigger value="appearance" className="flex items-center space-x-1 sm:space-x-2 text-xs sm:text-sm">
            <Palette className="w-3 h-3 sm:w-4 sm:h-4" />
            <span className="hidden sm:inline">Appearance</span>
            <span className="sm:hidden">Theme</span>
          </TabsTrigger>
          <TabsTrigger value="notifications" className="flex items-center space-x-1 sm:space-x-2 text-xs sm:text-sm">
            <Bell className="w-3 h-3 sm:w-4 sm:h-4" />
            <span className="hidden sm:inline">Notifications</span>
            <span className="sm:hidden">Notify</span>
          </TabsTrigger>
          <TabsTrigger value="dashboard" className="flex items-center space-x-1 sm:space-x-2 text-xs sm:text-sm">
            <Layout className="w-3 h-3 sm:w-4 sm:h-4" />
            <span>Dashboard</span>
          </TabsTrigger>
          <TabsTrigger value="reports" className="flex items-center space-x-1 sm:space-x-2 text-xs sm:text-sm">
            <FileText className="w-3 h-3 sm:w-4 sm:h-4" />
            <span>Reports</span>
          </TabsTrigger>
          <TabsTrigger value="profile" className="flex items-center space-x-1 sm:space-x-2 text-xs sm:text-sm col-span-2 sm:col-span-1">
            <User className="w-3 h-3 sm:w-4 sm:h-4" />
            <span>Profile</span>
          </TabsTrigger>
        </TabsList>

        {/* Appearance Settings */}
        <TabsContent value="appearance">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center space-x-2">
                <Palette className="w-5 h-5" />
                <span>Appearance & Theme</span>
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-6">
              <div>
                <Label className="text-base font-medium">Theme</Label>
                <p className="text-sm text-gray-600 mb-4">Choose how PentestPro looks to you</p>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  {themes.map((themeOption) => (
                    <Card 
                      key={themeOption.value}
                      className={`cursor-pointer transition-all border-2 ${
                        theme === themeOption.value 
                          ? 'border-blue-500 bg-blue-50' 
                          : 'border-gray-200 hover:border-gray-300'
                      }`}
                      onClick={() => handleThemeChange(themeOption.value)}
                    >
                      <CardContent className="p-4">
                        <div className="flex items-center justify-between mb-2">
                          <h3 className="font-semibold">{themeOption.label}</h3>
                          {theme === themeOption.value && (
                            <Check className="w-5 h-5 text-blue-600" />
                          )}
                        </div>
                        <p className="text-sm text-gray-600">{themeOption.description}</p>
                        
                        {/* Theme Preview */}
                        <div className="mt-3 h-8 rounded overflow-hidden flex">
                          {themeOption.value === 'light' && (
                            <>
                              <div className="flex-1 bg-white border-r"></div>
                              <div className="flex-1 bg-gray-100 border-r"></div>
                              <div className="flex-1 bg-blue-500"></div>
                            </>
                          )}
                          {themeOption.value === 'dark' && (
                            <>
                              <div className="flex-1 bg-gray-900 border-r border-gray-700"></div>
                              <div className="flex-1 bg-gray-800 border-r border-gray-700"></div>
                              <div className="flex-1 bg-blue-600"></div>
                            </>
                          )}
                          {themeOption.value === 'high-contrast' && (
                            <>
                              <div className="flex-1 bg-black border-r border-white"></div>
                              <div className="flex-1 bg-gray-900 border-r border-white"></div>
                              <div className="flex-1 bg-yellow-500"></div>
                            </>
                          )}
                        </div>
                      </CardContent>
                    </Card>
                  ))}
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        {/* Notification Settings */}
        <TabsContent value="notifications">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center space-x-2">
                <Bell className="w-5 h-5" />
                <span>Notification Preferences</span>
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="flex items-center justify-between">
                <div>
                  <Label className="text-base font-medium">Push Notifications</Label>
                  <p className="text-sm text-gray-600">Receive notifications in your browser</p>
                </div>
                <Switch
                  checked={settings.notifications_enabled}
                  onCheckedChange={(checked) => handleSettingsChange('notifications_enabled', checked)}
                />
              </div>

              <Separator />

              <div className="flex items-center justify-between">
                <div>
                  <Label className="text-base font-medium">Email Notifications</Label>
                  <p className="text-sm text-gray-600">Receive important updates via email</p>
                </div>
                <Switch
                  checked={settings.email_notifications}
                  onCheckedChange={(checked) => handleSettingsChange('email_notifications', checked)}
                />
              </div>

              <div className="pt-4">
                <Button onClick={saveSettings} disabled={loading} className="w-full md:w-auto">
                  {loading ? 'Saving...' : 'Save Notification Settings'}
                </Button>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        {/* Dashboard Settings */}
        <TabsContent value="dashboard">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center space-x-2">
                <Layout className="w-5 h-5" />
                <span>Dashboard Layout</span>
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-6">
              <div>
                <Label className="text-base font-medium">Layout Style</Label>
                <p className="text-sm text-gray-600 mb-4">Choose your preferred dashboard layout</p>
                <Select 
                  value={settings.dashboard_layout} 
                  onValueChange={(value) => handleSettingsChange('dashboard_layout', value)}
                >
                  <SelectTrigger className="w-full md:w-64">
                    <SelectValue placeholder="Select layout" />
                  </SelectTrigger>
                  <SelectContent>
                    {dashboardLayouts.map(layout => (
                      <SelectItem key={layout.value} value={layout.value}>
                        <div>
                          <div className="font-medium">{layout.label}</div>
                          <div className="text-sm text-gray-500">{layout.description}</div>
                        </div>
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>

              <div className="pt-4">
                <Button onClick={saveSettings} disabled={loading} className="w-full md:w-auto">
                  {loading ? 'Saving...' : 'Save Dashboard Settings'}
                </Button>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        {/* Report Settings */}
        <TabsContent value="reports">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center space-x-2">
                <FileText className="w-5 h-5" />
                <span>Report Preferences</span>
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="flex items-center justify-between">
                <div>
                  <Label className="text-base font-medium">Auto-generate Reports</Label>
                  <p className="text-sm text-gray-600">Automatically generate reports when assessments are completed</p>
                </div>
                <Switch
                  checked={settings.report_auto_generate}
                  onCheckedChange={(checked) => handleSettingsChange('report_auto_generate', checked)}
                />
              </div>

              <Separator />

              <div>
                <Label className="text-base font-medium">Reports per Page</Label>
                <p className="text-sm text-gray-600 mb-2">Number of reports to display per page</p>
                <Select 
                  value={settings.reports_per_page.toString()} 
                  onValueChange={(value) => handleSettingsChange('reports_per_page', parseInt(value))}
                >
                  <SelectTrigger className="w-32">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="5">5</SelectItem>
                    <SelectItem value="10">10</SelectItem>
                    <SelectItem value="20">20</SelectItem>
                    <SelectItem value="50">50</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div className="pt-4">
                <Button onClick={saveSettings} disabled={loading} className="w-full md:w-auto">
                  {loading ? 'Saving...' : 'Save Report Settings'}
                </Button>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        {/* Profile Settings */}
        <TabsContent value="profile">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center space-x-2">
                <User className="w-5 h-5" />
                <span>Profile Information</span>
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="flex items-center space-x-4 mb-6">
                <div className="w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center">
                  <User className="w-8 h-8 text-blue-600" />
                </div>
                <div>
                  <h3 className="font-semibold text-lg">{user?.full_name || user?.username}</h3>
                  <p className="text-gray-600">{user?.email}</p>
                  <div className="flex items-center space-x-2 mt-1">
                    <Badge variant="outline" className="flex items-center space-x-1">
                      <Shield className="w-3 h-3" />
                      <span className="capitalize">{user?.role?.replace('_', ' ')}</span>
                    </Badge>
                  </div>
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="username">Username</Label>
                  <Input
                    id="username"
                    name="username"
                    value={profileData.username}
                    onChange={handleProfileChange}
                    placeholder="Enter username"
                    className="h-11 sm:h-10"
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="full_name">Full Name</Label>
                  <Input
                    id="full_name"
                    name="full_name"
                    value={profileData.full_name}
                    onChange={handleProfileChange}
                    placeholder="Enter full name"
                    className="h-11 sm:h-10"
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="organization">Organization</Label>
                  <Input
                    id="organization"
                    name="organization"
                    value={profileData.organization}
                    onChange={handleProfileChange}
                    placeholder="Enter organization"
                    className="h-11 sm:h-10"
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="team">Team</Label>
                  <Input
                    id="team"
                    name="team"
                    value={profileData.team}
                    onChange={handleProfileChange}
                    placeholder="Enter team"
                    className="h-11 sm:h-10"
                  />
                </div>
              </div>

              <div className="pt-4">
                <Button onClick={saveProfile} disabled={loadingProfile} className="w-full md:w-auto">
                  {loadingProfile ? 'Updating...' : 'Update Profile'}
                </Button>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
};

export default Settings;