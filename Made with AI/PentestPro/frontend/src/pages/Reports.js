import React, { useState, useEffect } from "react";
import axios from "axios";
import { 
  FileText, 
  Download, 
  Eye, 
  Plus,
  Search,
  Filter,
  Calendar,
  ExternalLink
} from "lucide-react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { useNavigate } from "react-router-dom";
import { toast } from "sonner";

const BACKEND_URL = process.env.REACT_APP_BACKEND_URL;
const API = `${BACKEND_URL}/api`;

const Reports = () => {
  const navigate = useNavigate();
  const [assessments, setAssessments] = useState([]);
  const [reports, setReports] = useState([]);
  const [loading, setLoading] = useState(true);
  const [searchQuery, setSearchQuery] = useState("");
  const [selectedPreview, setSelectedPreview] = useState(null);

  useEffect(() => {
    fetchData();
  }, []);

  const fetchData = async () => {
    try {
      const [assessmentsResponse] = await Promise.all([
        axios.get(`${API}/assessments`)
      ]);
      
      setAssessments(assessmentsResponse.data);
      
      // In a real app, you'd fetch reports here
      // For now, we'll use mock data
      setReports([]);
    } catch (error) {
      console.error("Failed to fetch data:", error);
      toast.error("Failed to load reports data");
    } finally {
      setLoading(false);
    }
  };

  const handleGenerateReport = async (assessment) => {
    try {
      toast.loading("Generating report...");
      const response = await axios.post(`${API}/assessments/${assessment.id}/report`);
      toast.success("Report generated successfully");
      
      // Show preview
      setSelectedPreview(response.data);
    } catch (error) {
      console.error("Failed to generate report:", error);
      toast.error("Failed to generate report");
    }
  };

  const handleDownloadPDF = async (reportId, reportName = "Assessment Report") => {
    try {
      toast.loading("Generating PDF...");
      
      const response = await axios.get(`${API}/reports/${reportId}/pdf`, {
        responseType: 'blob'
      });
      
      // Create blob URL and download
      const blob = new Blob([response.data], { type: 'application/pdf' });
      const url = window.URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      
      // Format filename
      const sanitizedName = reportName.replace(/[^a-zA-Z0-9\s-]/g, '');
      const timestamp = new Date().toISOString().split('T')[0];
      link.download = `${sanitizedName}_${timestamp}.pdf`;
      
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      window.URL.revokeObjectURL(url);
      
      toast.success("PDF downloaded successfully");
    } catch (error) {
      console.error("Failed to download PDF:", error);
      toast.error("Failed to download PDF");
    }
  };

  const formatDate = (dateString) => {
    return new Date(dateString).toLocaleDateString('en-US', {
      month: 'short',
      day: 'numeric',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  const completedAssessments = assessments.filter(a => a.status === 'completed');
  
  const filteredAssessments = completedAssessments.filter(assessment => 
    assessment.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
    assessment.template_name.toLowerCase().includes(searchQuery.toLowerCase())
  );

  if (loading) {
    return (
      <div className="space-y-6 animate-fade-in">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {[...Array(4)].map((_, i) => (
            <Card key={i} className="animate-pulse">
              <CardContent className="p-6">
                <div className="space-y-3">
                  <div className="h-4 bg-slate-200 rounded w-3/4"></div>
                  <div className="h-3 bg-slate-200 rounded w-1/2"></div>
                  <div className="h-10 bg-slate-200 rounded"></div>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6 animate-fade-in">
      {/* Header */}
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between">
        <div>
          <h1 className="text-2xl font-bold text-slate-900 text-heading">Reports</h1>
          <p className="text-slate-600 mt-1">Generate and manage assessment reports</p>
        </div>
        <Button 
          onClick={() => navigate('/assessments')}
          variant="outline"
          data-testid="view-assessments-btn"
        >
          <ExternalLink className="w-4 h-4 mr-2" />
          View Assessments
        </Button>
      </div>

      {/* Search */}
      <div className="relative max-w-md">
        <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-slate-400" />
        <Input
          placeholder="Search completed assessments..."
          value={searchQuery}
          onChange={(e) => setSearchQuery(e.target.value)}
          className="pl-10"
          data-testid="report-search"
        />
      </div>

      {selectedPreview && (
        <Card>
          <CardHeader>
            <div className="flex items-center justify-between">
              <CardTitle className="text-heading">Report Preview</CardTitle>
              <div className="flex items-center space-x-2">
                <Button 
                  size="sm" 
                  variant="outline"
                  onClick={() => handleDownloadPDF(selectedPreview.id, selectedPreview.name)}
                  data-testid="download-pdf-btn"
                >
                  <Download className="w-4 h-4 mr-2" />
                  Download PDF
                </Button>
                <Button size="sm" variant="ghost" onClick={() => setSelectedPreview(null)}>
                  Close
                </Button>
              </div>
            </div>
          </CardHeader>
          <CardContent>
            <div className="prose prose-slate max-w-none">
              <pre className="whitespace-pre-wrap bg-slate-50 p-4 rounded-lg text-sm">
                {selectedPreview.content}
              </pre>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Completed Assessments */}
      <div>
        <h2 className="text-lg font-semibold text-slate-900 text-heading mb-4">
          Completed Assessments Ready for Reports
        </h2>
        
        {filteredAssessments.length > 0 ? (
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {filteredAssessments.map((assessment) => (
              <Card key={assessment.id} className="hover-lift">
                <CardHeader>
                  <div className="flex items-start justify-between">
                    <div className="flex-1 min-w-0">
                      <CardTitle className="text-lg text-heading truncate">
                        {assessment.name}
                      </CardTitle>
                      <CardDescription className="mt-1">
                        Template: {assessment.template_name}
                      </CardDescription>
                    </div>
                    <Badge variant="default">Completed</Badge>
                  </div>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    <div className="text-sm text-slate-600 space-y-1">
                      <div className="flex items-center">
                        <Calendar className="w-4 h-4 mr-2 text-slate-400" />
                        Completed: {formatDate(assessment.completed_at || assessment.updated_at)}
                      </div>
                    </div>

                    <div className="flex items-center space-x-2 flex-wrap gap-2">
                      <Button 
                        size="sm" 
                        onClick={() => handleGenerateReport(assessment)}
                        data-testid={`generate-report-${assessment.id}`}
                      >
                        <FileText className="w-4 h-4 mr-2" />
                        Generate Report
                      </Button>
                      <Button 
                        size="sm" 
                        variant="outline"
                        onClick={() => navigate(`/assessments/${assessment.id}/workflow`)}
                      >
                        <Eye className="w-4 h-4 mr-2" />
                        View Assessment
                      </Button>
                      {/* Quick PDF Generation - Generate and Download in one step */}
                      <Button 
                        size="sm" 
                        variant="secondary"
                        onClick={async () => {
                          try {
                            // Generate report first
                            const reportResponse = await axios.post(`${API}/assessments/${assessment.id}/report`);
                            // Then download PDF
                            await handleDownloadPDF(reportResponse.data.id, assessment.name);
                          } catch (error) {
                            console.error("Failed to generate and download PDF:", error);
                            toast.error("Failed to generate PDF report");
                          }
                        }}
                        data-testid={`quick-pdf-${assessment.id}`}
                      >
                        <Download className="w-4 h-4 mr-2" />
                        Quick PDF
                      </Button>
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        ) : (
          <div className="text-center py-12">
            <FileText className="w-16 h-16 text-slate-300 mx-auto mb-4" />
            <h3 className="text-lg font-medium text-slate-900 mb-2">
              {searchQuery ? "No matching completed assessments" : "No completed assessments yet"}
            </h3>
            <p className="text-slate-500 mb-6">
              {searchQuery 
                ? "Try adjusting your search criteria"
                : "Complete some assessments to generate reports"
              }
            </p>
            {!searchQuery && (
              <Button onClick={() => navigate('/assessments')}>
                <Plus className="w-4 h-4 mr-2" />
                View Assessments
              </Button>
            )}
          </div>
        )}
      </div>

      {/* Help Section */}
      <Card className="bg-blue-50 border-blue-200">
        <CardContent className="p-6">
          <div className="flex items-start space-x-4">
            <div className="w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center flex-shrink-0">
              <FileText className="w-4 h-4 text-blue-600" />
            </div>
            <div>
              <h4 className="font-medium text-blue-900 mb-2">About Reports</h4>
              <div className="text-blue-800 text-sm space-y-1">
                <p>• Reports are automatically generated from completed assessments</p>
                <p>• Include executive summary, methodology, findings, and recommendations</p>
                <p>• Export to PDF with professional formatting</p>
                <p>• Customize report sections using template configuration</p>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default Reports;