#!/usr/bin/env python3
"""
Specific test for the 5 expanded templates in PentestPro application.
This test validates the comprehensive expansion work done on:
1. Blockchain & Smart Contract Security
2. Supply Chain Security Assessment  
3. Email Security Assessment
4. DNS Security Assessment
5. Zero Trust Architecture Assessment
"""

import requests
import json
import sys

class ExpandedTemplatesValidator:
    def __init__(self, base_url="https://vulntracker-13.preview.emergentagent.com"):
        self.base_url = base_url
        self.api_url = f"{base_url}/api"
        self.expanded_templates = {
            "Blockchain & Smart Contract Security": {
                "expected_steps": 6,
                "expected_min_report_sections": 7,
                "step_names": [
                    "Infrastructure Assessment",
                    "Smart Contract Analysis", 
                    "DeFi Protocol Security",
                    "Cryptographic Implementation",
                    "Tokenomics Analysis",
                    "Security Testing"
                ]
            },
            "Supply Chain Security Assessment": {
                "expected_steps": 5,
                "expected_min_report_sections": 7,
                "step_names": [
                    "Supply Chain Architecture Mapping",
                    "Vendor & Third-Party Assessment",
                    "Software Supply Chain Security",
                    "Hardware Security Assessment", 
                    "Risk Management & Compliance"
                ]
            },
            "Email Security Assessment": {
                "expected_steps": 6,
                "expected_min_report_sections": 8,
                "step_names": [
                    "Email Infrastructure Assessment",
                    "Authentication Protocols Analysis",
                    "Anti-Phishing & Anti-Spam Controls",
                    "Email Encryption & Data Protection",
                    "User Awareness & Training Assessment",
                    "Monitoring & Incident Response"
                ]
            },
            "DNS Security Assessment": {
                "expected_steps": 6,
                "expected_min_report_sections": 8,
                "step_names": [
                    "DNS Infrastructure Assessment",
                    "DNS Configuration Security",
                    "DNSSEC Implementation Review",
                    "DNS Threat Protection",
                    "DNS Performance & Availability",
                    "DNS Monitoring & Logging"
                ]
            },
            "Zero Trust Architecture Assessment": {
                "expected_steps": 7,
                "expected_min_report_sections": 9,
                "step_names": [
                    "Zero Trust Strategy & Governance",
                    "Identity & Access Management (IAM)",
                    "Device Security & Compliance",
                    "Network Microsegmentation",
                    "Data Protection & Classification",
                    "Application Security",
                    "Continuous Monitoring & Analytics"
                ]
            }
        }
        
    def get_all_templates(self):
        """Get all templates from the API"""
        try:
            response = requests.get(f"{self.api_url}/templates", timeout=10)
            response.raise_for_status()
            return response.json()
        except Exception as e:
            print(f"‚ùå Error getting templates: {e}")
            return []
    
    def get_template_by_id(self, template_id):
        """Get specific template by ID"""
        try:
            response = requests.get(f"{self.api_url}/templates/{template_id}", timeout=10)
            response.raise_for_status()
            return response.json()
        except Exception as e:
            print(f"‚ùå Error getting template {template_id}: {e}")
            return None
    
    def validate_expanded_template(self, template_name, template_data, expected_config):
        """Validate a single expanded template"""
        print(f"\nüîç Validating: {template_name}")
        print("=" * 60)
        
        validation_results = {
            "template_name": template_name,
            "passed": True,
            "issues": []
        }
        
        # Check step count
        actual_steps = len(template_data.get('steps', []))
        expected_steps = expected_config['expected_steps']
        
        if actual_steps != expected_steps:
            validation_results["passed"] = False
            validation_results["issues"].append(f"Step count mismatch: expected {expected_steps}, got {actual_steps}")
            print(f"‚ùå Step count: Expected {expected_steps}, got {actual_steps}")
        else:
            print(f"‚úÖ Step count: {actual_steps} steps")
        
        # Check report sections count
        actual_sections = len(template_data.get('report_structure', []))
        expected_min_sections = expected_config['expected_min_report_sections']
        
        if actual_sections < expected_min_sections:
            validation_results["passed"] = False
            validation_results["issues"].append(f"Report sections: expected at least {expected_min_sections}, got {actual_sections}")
            print(f"‚ùå Report sections: Expected at least {expected_min_sections}, got {actual_sections}")
        else:
            print(f"‚úÖ Report sections: {actual_sections} sections")
        
        # Validate step names and content
        steps = template_data.get('steps', [])
        expected_step_names = expected_config.get('step_names', [])
        
        print(f"\nüìã Step Analysis:")
        total_fields = 0
        field_types_used = set()
        
        for i, step in enumerate(steps):
            step_name = step.get('name', 'Unknown')
            step_fields = step.get('fields', [])
            field_count = len(step_fields)
            total_fields += field_count
            
            # Collect field types
            for field in step_fields:
                field_types_used.add(field.get('type', 'unknown'))
            
            print(f"   {i+1}. {step_name}")
            print(f"      Fields: {field_count}")
            print(f"      Instructions: {len(step.get('instructions', ''))} chars")
            
            # Check if step has comprehensive content
            if field_count < 3:
                validation_results["issues"].append(f"Step '{step_name}' has only {field_count} fields (expected more comprehensive)")
            
            if len(step.get('instructions', '')) < 50:
                validation_results["issues"].append(f"Step '{step_name}' has minimal instructions")
        
        print(f"\nüìä Field Analysis:")
        print(f"   Total fields: {total_fields}")
        print(f"   Field types used: {sorted(field_types_used)}")
        print(f"   Field type diversity: {len(field_types_used)} types")
        
        # Check field diversity
        if len(field_types_used) < 4:
            validation_results["issues"].append(f"Limited field type diversity: only {len(field_types_used)} types")
            print(f"‚ùå Limited field type diversity")
        else:
            print(f"‚úÖ Good field type diversity")
        
        # Check total field count for comprehensiveness
        if total_fields < 15:
            validation_results["issues"].append(f"Low total field count: {total_fields} (expected more comprehensive)")
            print(f"‚ùå Low total field count: {total_fields}")
        else:
            print(f"‚úÖ Comprehensive field count: {total_fields}")
        
        # Validate report structure
        print(f"\nüìÑ Report Structure Analysis:")
        report_sections = template_data.get('report_structure', [])
        for i, section in enumerate(report_sections):
            section_title = section.get('title', 'Unknown')
            content_length = len(section.get('content_template', ''))
            print(f"   {i+1}. {section_title} ({content_length} chars)")
            
            if content_length < 30:
                validation_results["issues"].append(f"Report section '{section_title}' has minimal content template")
        
        # Final validation
        if validation_results["passed"] and len(validation_results["issues"]) == 0:
            print(f"\n‚úÖ {template_name}: FULLY VALIDATED")
        else:
            validation_results["passed"] = False
            print(f"\n‚ùå {template_name}: VALIDATION ISSUES FOUND")
            for issue in validation_results["issues"]:
                print(f"   - {issue}")
        
        return validation_results
    
    def run_comprehensive_validation(self):
        """Run comprehensive validation of all expanded templates"""
        print("üöÄ Starting Comprehensive Expanded Templates Validation")
        print("=" * 80)
        
        # Get all templates
        templates = self.get_all_templates()
        if not templates:
            print("‚ùå Failed to get templates")
            return False
        
        print(f"üìä Total templates available: {len(templates)}")
        
        # Find and validate each expanded template
        validation_results = []
        templates_found = 0
        
        for template in templates:
            template_name = template.get('name', '')
            if template_name in self.expanded_templates:
                templates_found += 1
                expected_config = self.expanded_templates[template_name]
                
                # Get detailed template data
                template_id = template.get('id')
                detailed_template = self.get_template_by_id(template_id)
                
                if detailed_template:
                    result = self.validate_expanded_template(template_name, detailed_template, expected_config)
                    validation_results.append(result)
                else:
                    print(f"‚ùå Failed to get detailed data for {template_name}")
                    validation_results.append({
                        "template_name": template_name,
                        "passed": False,
                        "issues": ["Failed to retrieve detailed template data"]
                    })
        
        # Summary
        print("\n" + "=" * 80)
        print("üìä VALIDATION SUMMARY")
        print("=" * 80)
        
        print(f"Expected expanded templates: {len(self.expanded_templates)}")
        print(f"Templates found: {templates_found}")
        print(f"Templates validated: {len(validation_results)}")
        
        passed_count = sum(1 for result in validation_results if result["passed"])
        failed_count = len(validation_results) - passed_count
        
        print(f"\n‚úÖ Passed validations: {passed_count}")
        print(f"‚ùå Failed validations: {failed_count}")
        
        if failed_count > 0:
            print(f"\n‚ùå FAILED TEMPLATES:")
            for result in validation_results:
                if not result["passed"]:
                    print(f"   - {result['template_name']}")
                    for issue in result["issues"]:
                        print(f"     ‚Ä¢ {issue}")
        
        # Test dashboard statistics
        print(f"\nüìä Testing Dashboard Statistics...")
        try:
            response = requests.get(f"{self.api_url}/dashboard", timeout=10)
            if response.status_code == 200:
                dashboard_data = response.json()
                stats = dashboard_data.get('stats', {})
                template_count = stats.get('templates', 0)
                print(f"‚úÖ Dashboard reports {template_count} templates")
                
                if template_count == len(templates):
                    print(f"‚úÖ Dashboard count matches actual template count")
                else:
                    print(f"‚ùå Dashboard count ({template_count}) doesn't match actual count ({len(templates)})")
            else:
                print(f"‚ùå Dashboard request failed: {response.status_code}")
        except Exception as e:
            print(f"‚ùå Dashboard test error: {e}")
        
        # Overall result
        all_passed = (templates_found == len(self.expanded_templates) and failed_count == 0)
        
        if all_passed:
            print(f"\nüéâ ALL EXPANDED TEMPLATES VALIDATION PASSED!")
            print(f"   ‚úÖ All 5 expanded templates found and validated")
            print(f"   ‚úÖ Comprehensive steps and fields verified")
            print(f"   ‚úÖ Report structures are comprehensive")
            print(f"   ‚úÖ Field type diversity confirmed")
            return True
        else:
            print(f"\n‚ö†Ô∏è  EXPANDED TEMPLATES VALIDATION ISSUES DETECTED")
            if templates_found < len(self.expanded_templates):
                missing = set(self.expanded_templates.keys()) - set(result["template_name"] for result in validation_results)
                print(f"   ‚ùå Missing templates: {missing}")
            if failed_count > 0:
                print(f"   ‚ùå {failed_count} templates failed validation")
            return False

def main():
    validator = ExpandedTemplatesValidator()
    success = validator.run_comprehensive_validation()
    return 0 if success else 1

if __name__ == "__main__":
    sys.exit(main())