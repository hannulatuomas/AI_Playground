import { VulnerabilityScannerService } from '../../src/main/services/VulnerabilityScannerService';

describe('VulnerabilityScannerService', () => {
  let service: VulnerabilityScannerService;

  beforeEach(() => {
    service = new VulnerabilityScannerService();
  });

  describe('Scan Execution', () => {
    test('should run vulnerability scan', async () => {
      const result = await service.runScan({
        url: 'https://example.com/api',
        method: 'GET',
        enableSQLInjection: true,
        enableXSS: false,
        enableCommandInjection: false,
        enablePathTraversal: false,
        enableXXE: false,
        enableFuzzing: false,
      });

      expect(result).toBeDefined();
      expect(result.url).toBe('https://example.com/api');
      expect(result.tests.length).toBeGreaterThan(0);
    });

    test('should track test statistics', async () => {
      const result = await service.runScan({
        url: 'https://example.com/api',
        method: 'POST',
      });

      expect(result).toBeDefined();
      expect(result.totalTests).toBeGreaterThan(0);
      expect(result.vulnerableCount).toBeGreaterThanOrEqual(0);
      expect(result.criticalCount).toBeGreaterThanOrEqual(0);
      expect(result.highCount).toBeGreaterThanOrEqual(0);
    }, 15000); // 15 second timeout for full scan
  });

  describe('Test Categories', () => {
    test('should include SQL injection tests when enabled', async () => {
      const result = await service.runScan({
        url: 'https://example.com/api',
        method: 'GET',
        enableSQLInjection: true,
        enableXSS: false,
        enableCommandInjection: false,
        enablePathTraversal: false,
        enableXXE: false,
        enableFuzzing: false,
      });

      const sqlTests = result.tests.filter(t => t.category === 'sql-injection');
      expect(sqlTests.length).toBeGreaterThan(0);
    });

    test('should include XSS tests when enabled', async () => {
      const result = await service.runScan({
        url: 'https://example.com/api',
        method: 'GET',
        enableSQLInjection: false,
        enableXSS: true,
        enableCommandInjection: false,
        enablePathTraversal: false,
        enableXXE: false,
        enableFuzzing: false,
      });

      const xssTests = result.tests.filter(t => t.category === 'xss');
      expect(xssTests.length).toBeGreaterThan(0);
    });

    test('should skip disabled categories', async () => {
      const result = await service.runScan({
        url: 'https://example.com/api',
        method: 'GET',
        enableSQLInjection: false,
        enableXSS: false,
        enableCommandInjection: false,
        enablePathTraversal: false,
        enableXXE: false,
        enableFuzzing: false,
      });

      expect(result.tests.length).toBe(0);
    });
  });

  describe('Vulnerability Detection', () => {
    test('should categorize by severity', async () => {
      const result = await service.runScan({
        url: 'https://example.com/api',
        method: 'GET',
      });

      const criticalTests = result.tests.filter(t => t.severity === 'critical');
      const highTests = result.tests.filter(t => t.severity === 'high');
      const mediumTests = result.tests.filter(t => t.severity === 'medium');

      expect(criticalTests.length + highTests.length + mediumTests.length).toBeGreaterThan(0);
    }, 15000); // 15 second timeout for full scan
  });

  describe('Summary Generation', () => {
    test('should generate summary', async () => {
      const result = await service.runScan({
        url: 'https://example.com/api',
        method: 'GET',
      });

      const summary = service.getSummary(result);
      expect(summary).toContain('Vulnerability Scan Results');
      expect(summary).toContain('Total Tests');
    }, 15000); // 15 second timeout for full scan
  });

  describe('Recommendations', () => {
    test('should provide recommendations', async () => {
      const result = await service.runScan({
        url: 'https://example.com/api',
        method: 'GET',
      });

      const recommendations = service.getRecommendations(result);
      expect(Array.isArray(recommendations)).toBe(true);
    }, 15000); // 15 second timeout for full scan
  });

  describe('Export', () => {
    test('should export results as JSON', async () => {
      const result = await service.runScan({
        url: 'https://example.com/api',
        method: 'GET',
      });

      const json = service.exportResult(result);
      expect(json).toBeDefined();
      expect(() => JSON.parse(json)).not.toThrow();
    }, 15000); // 15 second timeout for full scan
  });
});
