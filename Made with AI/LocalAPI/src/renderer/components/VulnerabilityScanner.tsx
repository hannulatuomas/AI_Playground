import React, { useState } from 'react';
import {
  Box,
  Button,
  TextField,
  Typography,
  Paper,
  List,
  ListItem,
  Chip,
  Alert,
  LinearProgress,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  FormGroup,
  FormControlLabel,
  Checkbox,
  Card,
  CardContent,
  Grid,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  Divider,
} from '@mui/material';
import {
  PlayArrow as PlayIcon,
  Stop as StopIcon,
  ExpandMore as ExpandMoreIcon,
  Security as SecurityIcon,
  BugReport as BugIcon,
  Download as DownloadIcon,
} from '@mui/icons-material';

interface VulnerabilityTest {
  id: string;
  name: string;
  category: string;
  severity: 'critical' | 'high' | 'medium' | 'low';
  payload: string;
  vulnerable: boolean;
  evidence?: string;
  response?: {
    status: number;
    body: string;
    time: number;
  };
}

interface ScanResult {
  url: string;
  method: string;
  timestamp: Date;
  tests: VulnerabilityTest[];
  vulnerableCount: number;
  criticalCount: number;
  highCount: number;
  mediumCount: number;
  lowCount: number;
  totalTests: number;
}

const VulnerabilityScanner: React.FC = () => {
  const [url, setUrl] = useState('https://example.com/api');
  const [method, setMethod] = useState<'GET' | 'POST' | 'PUT' | 'DELETE'>('GET');
  const [scanning, setScanning] = useState(false);
  const [progress, setProgress] = useState(0);
  const [result, setResult] = useState<ScanResult | null>(null);
  const [error, setError] = useState<string | null>(null);

  const [enableSQLInjection, setEnableSQLInjection] = useState(true);
  const [enableXSS, setEnableXSS] = useState(true);
  const [enableCommandInjection, setEnableCommandInjection] = useState(true);
  const [enablePathTraversal, setEnablePathTraversal] = useState(true);
  const [enableXXE, setEnableXXE] = useState(true);
  const [enableFuzzing, setEnableFuzzing] = useState(true);

  const handleStartScan = async () => {
    setError(null);
    setScanning(true);
    setProgress(0);
    setResult(null);

    try {
      const scanResult = await (window as any).electron.invoke('vulnerability:scan', {
        url,
        method,
        enableSQLInjection,
        enableXSS,
        enableCommandInjection,
        enablePathTraversal,
        enableXXE,
        enableFuzzing,
      });

      if (scanResult.error) {
        setError(scanResult.error);
      } else {
        setResult(scanResult.result);
      }
    } catch (err: any) {
      setError(`Scan failed: ${err.message}`);
    } finally {
      setScanning(false);
      setProgress(100);
    }
  };

  const handleExport = (format: 'json') => {
    if (!result) return;

    const data = JSON.stringify(result, null, 2);
    const blob = new Blob([data], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `vulnerability-scan-${Date.now()}.json`;
    a.click();
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical':
        return 'error';
      case 'high':
        return 'error';
      case 'medium':
        return 'warning';
      case 'low':
        return 'info';
      default:
        return 'default';
    }
  };

  const groupByCategory = (tests: VulnerabilityTest[]) => {
    const groups: Record<string, VulnerabilityTest[]> = {};
    for (const test of tests) {
      if (!groups[test.category]) {
        groups[test.category] = [];
      }
      groups[test.category].push(test);
    }
    return groups;
  };

  const vulnerableTests = result?.tests.filter(t => t.vulnerable) || [];
  const groupedVulnerable = groupByCategory(vulnerableTests);

  return (
    <Box sx={{ height: '100%', display: 'flex', flexDirection: 'column' }}>
      {/* Header */}
      <Box sx={{ p: 2, borderBottom: 1, borderColor: 'divider' }}>
        <Typography variant="h6">Vulnerability Scanner</Typography>
        <Typography variant="body2" color="text.secondary">
          Test for SQL injection, XSS, command injection, and more
        </Typography>
      </Box>

      {/* Configuration */}
      <Paper sx={{ m: 2, p: 2 }}>
        <Grid container spacing={2}>
          <Grid item xs={12} md={8}>
            <TextField
              fullWidth
              label="Target URL"
              value={url}
              onChange={(e) => setUrl(e.target.value)}
              disabled={scanning}
              placeholder="https://api.example.com/endpoint"
            />
          </Grid>
          <Grid item xs={12} md={4}>
            <FormControl fullWidth>
              <InputLabel>Method</InputLabel>
              <Select
                value={method}
                onChange={(e) => setMethod(e.target.value as 'GET' | 'POST' | 'PUT' | 'DELETE')}
                size="small"
              >
                <MenuItem value="GET">GET</MenuItem>
                <MenuItem value="POST">POST</MenuItem>
                <MenuItem value="PUT">PUT</MenuItem>
                <MenuItem value="DELETE">DELETE</MenuItem>
              </Select>
            </FormControl>
          </Grid>
        </Grid>

        <Typography variant="subtitle2" sx={{ mt: 2, mb: 1 }}>
          Test Categories
        </Typography>
        <FormGroup row>
          <FormControlLabel
            control={<Checkbox checked={enableSQLInjection} onChange={(e) => setEnableSQLInjection(e.target.checked)} />}
            label="SQL Injection"
            disabled={scanning}
          />
          <FormControlLabel
            control={<Checkbox checked={enableXSS} onChange={(e) => setEnableXSS(e.target.checked)} />}
            label="XSS"
            disabled={scanning}
          />
          <FormControlLabel
            control={<Checkbox checked={enableCommandInjection} onChange={(e) => setEnableCommandInjection(e.target.checked)} />}
            label="Command Injection"
            disabled={scanning}
          />
          <FormControlLabel
            control={<Checkbox checked={enablePathTraversal} onChange={(e) => setEnablePathTraversal(e.target.checked)} />}
            label="Path Traversal"
            disabled={scanning}
          />
          <FormControlLabel
            control={<Checkbox checked={enableXXE} onChange={(e) => setEnableXXE(e.target.checked)} />}
            label="XXE"
            disabled={scanning}
          />
          <FormControlLabel
            control={<Checkbox checked={enableFuzzing} onChange={(e) => setEnableFuzzing(e.target.checked)} />}
            label="Fuzzing"
            disabled={scanning}
          />
        </FormGroup>

        <Box sx={{ mt: 2 }}>
          <Button
            variant="contained"
            onClick={handleStartScan}
            disabled={scanning || !url}
            startIcon={scanning ? <StopIcon /> : <PlayIcon />}
          >
            {scanning ? 'Scanning...' : 'Start Scan'}
          </Button>
        </Box>

        {scanning && (
          <Box sx={{ mt: 2 }}>
            <LinearProgress variant="indeterminate" />
          </Box>
        )}
      </Paper>

      {/* Error */}
      {error && (
        <Alert severity="error" sx={{ mx: 2, mb: 2 }} onClose={() => setError(null)}>
          {error}
        </Alert>
      )}

      {/* Results */}
      {result && (
        <Box sx={{ flex: 1, overflow: 'auto', px: 2, pb: 2 }}>
          {/* Summary */}
          <Paper sx={{ p: 2, mb: 2 }}>
            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
              <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
                <BugIcon sx={{ fontSize: 40, color: result.vulnerableCount > 0 ? 'error.main' : 'success.main' }} />
                <Box>
                  <Typography variant="h6">
                    {result.vulnerableCount === 0 ? 'No Vulnerabilities Found' : `${result.vulnerableCount} Vulnerabilities Found`}
                  </Typography>
                  <Typography variant="body2" color="text.secondary">
                    {result.totalTests} tests executed
                  </Typography>
                </Box>
              </Box>
              <Button
                size="small"
                startIcon={<DownloadIcon />}
                onClick={() => handleExport('json')}
              >
                Export
              </Button>
            </Box>

            <Grid container spacing={2}>
              <Grid item xs={3}>
                <Card variant="outlined">
                  <CardContent sx={{ textAlign: 'center', py: 1 }}>
                    <Typography variant="h4" color="error.main">
                      {result.criticalCount}
                    </Typography>
                    <Typography variant="caption">Critical</Typography>
                  </CardContent>
                </Card>
              </Grid>
              <Grid item xs={3}>
                <Card variant="outlined">
                  <CardContent sx={{ textAlign: 'center', py: 1 }}>
                    <Typography variant="h4" color="warning.main">
                      {result.highCount}
                    </Typography>
                    <Typography variant="caption">High</Typography>
                  </CardContent>
                </Card>
              </Grid>
              <Grid item xs={3}>
                <Card variant="outlined">
                  <CardContent sx={{ textAlign: 'center', py: 1 }}>
                    <Typography variant="h4" color="info.main">
                      {result.mediumCount}
                    </Typography>
                    <Typography variant="caption">Medium</Typography>
                  </CardContent>
                </Card>
              </Grid>
              <Grid item xs={3}>
                <Card variant="outlined">
                  <CardContent sx={{ textAlign: 'center', py: 1 }}>
                    <Typography variant="h4">
                      {result.lowCount}
                    </Typography>
                    <Typography variant="caption">Low</Typography>
                  </CardContent>
                </Card>
              </Grid>
            </Grid>
          </Paper>

          {/* Vulnerable Tests */}
          {vulnerableTests.length > 0 && (
            <>
              <Typography variant="h6" gutterBottom>
                Vulnerabilities Detected
              </Typography>

              {Object.entries(groupedVulnerable).map(([category, tests]) => (
                <Accordion key={category}>
                  <AccordionSummary expandIcon={<ExpandMoreIcon />}>
                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, width: '100%' }}>
                      <Typography sx={{ textTransform: 'capitalize' }}>
                        {category.replace(/-/g, ' ')}
                      </Typography>
                      <Chip label={`${tests.length} found`} size="small" color="error" />
                    </Box>
                  </AccordionSummary>
                  <AccordionDetails>
                    <List>
                      {tests.map((test, index) => (
                        <React.Fragment key={test.id}>
                          {index > 0 && <Divider />}
                          <ListItem alignItems="flex-start">
                            <Box sx={{ width: '100%' }}>
                              <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 1 }}>
                                <Typography variant="subtitle2">{test.name}</Typography>
                                <Chip
                                  label={test.severity}
                                  size="small"
                                  color={getSeverityColor(test.severity) as any}
                                />
                              </Box>
                              <Typography variant="caption" color="text.secondary" display="block" gutterBottom>
                                Payload: <code>{test.payload}</code>
                              </Typography>
                              {test.evidence && (
                                <Alert severity="warning" sx={{ mt: 1 }}>
                                  <Typography variant="caption">
                                    <strong>Evidence:</strong> {test.evidence}
                                  </Typography>
                                </Alert>
                              )}
                              {test.response && (
                                <Paper variant="outlined" sx={{ p: 1, mt: 1, bgcolor: 'grey.50' }}>
                                  <Typography variant="caption">
                                    Status: {test.response.status} | Time: {test.response.time}ms
                                  </Typography>
                                </Paper>
                              )}
                            </Box>
                          </ListItem>
                        </React.Fragment>
                      ))}
                    </List>
                  </AccordionDetails>
                </Accordion>
              ))}
            </>
          )}
        </Box>
      )}
    </Box>
  );
};

export default VulnerabilityScanner;
